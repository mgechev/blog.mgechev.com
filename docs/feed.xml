<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/</link>
    <description>Recent content on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prefetching Heuristics</title>
      <link>https://blog.mgechev.com/2021/02/07/prefetching-strategies-heuristics-faster-web-apps/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/02/07/prefetching-strategies-heuristics-faster-web-apps/</guid>
      <description>In this post, we&amp;rsquo;re going to focus on web performance. In particular, we&amp;rsquo;ll be discussing optimizing user experiences preemptively. When it comes down to speeding future actions up in Web UI development, we usually apply prefetching. With prefetching, we download and cache resources relying on assumptions for the user&amp;rsquo;s behavior. This way, we proactively perform a slow operation that the user would eventually have to execute while interacting with the app.</description>
    </item>
    
    <item>
      <title>Design Patterns in Open Source Projects - Part II</title>
      <link>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</guid>
      <description>This blog post introduces another design pattern into the context of ngrev. If you&amp;rsquo;re not yet familiar with the project, I&amp;rsquo;d strongly recommend taking 2 minutes to the introduction and &amp;ldquo;Project Overview&amp;rdquo; sections in the first part of the series.
If you did not take the time, ngrev is an Electron app that visualizes the structure of an Angular app, showing the relationships between components, modules, and providers. The UI retrieves the data for each view using an instance of a state object.</description>
    </item>
    
    <item>
      <title>Design Patterns in Open Source Projects - Part I</title>
      <link>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</guid>
      <description>I see two common frustrations around design patterns:
 It&amp;rsquo;s easy to memorize patterns but hard to figure out where and how to use them OOP is lame, and design patterns suck  If the second bullet point resonates with you, this blog post is probably not a good use of your time.
Now let&amp;rsquo;s focus on the first point. It&amp;rsquo;s not easy to understand design patterns just by reading the gang of four book or dummy examples on Wikipedia.</description>
    </item>
    
    <item>
      <title>What I learned doing 125 public talks - Part I</title>
      <link>https://blog.mgechev.com/2020/11/26/what-i-learned-doing-100-public-talks-part-i/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2020/11/26/what-i-learned-doing-100-public-talks-part-i/</guid>
      <description>Over the past 7 years, I gave over 125+ talks for 20 countries in front of over 50,000+ people. By any means, this doesn&amp;rsquo;t make me an expert in public speaking, but I had the opportunity to learn a few things that I&amp;rsquo;d love to share.
I&amp;rsquo;ll spread the content between a couple of different posts covering everything from planning, preparing the talk, rehearsals, and presentation at the event. I&amp;rsquo;d not discuss research, but this phase will naturally produce artifacts for the planning process.</description>
    </item>
    
    <item>
      <title>Dynamic imports solve all the problems, right?</title>
      <link>https://blog.mgechev.com/2019/05/11/dynamic-imports-javascript/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2019/05/11/dynamic-imports-javascript/</guid>
      <description>Since Angular version 8, we support dynamic imports in loadChildren in the route declaration. In this article, I want to give more information about why dynamic imports could be tricky to handle from tooling perspective and why you should be careful with them.
As engineers, we often have the perception that dynamic == good. With statically typed languages, such as TypeScript, this has shifted over the years. Because of compile-time checking, more folks started appreciating what tooling can give us if we provide statically analyzable information at build time.</description>
    </item>
    
    <item>
      <title>5 Angular CLI Features You Didn&#39;t Know About</title>
      <link>https://blog.mgechev.com/2019/02/06/5-angular-cli-features/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2019/02/06/5-angular-cli-features/</guid>
      <description>I&amp;rsquo;ve been using Angular for years, not only the framework itself but the entire development platform, including the CLI. Since I joined the Angular team and started digging into the source code, however, I started noticing features in the CLI that I&amp;rsquo;ve never used before. In this blog post I want to share some of them, which will make your work life easier and more productive!
Conditional Polyfill Serving In the development of Angular we&amp;rsquo;re using TypeScript with a lot of modern JavaScript features.</description>
    </item>
    
    <item>
      <title>Angular quicklink Preloading Strategy</title>
      <link>https://blog.mgechev.com/2018/12/24/quicklink-angular-prefetching-preloading-strategy/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/12/24/quicklink-angular-prefetching-preloading-strategy/</guid>
      <description>A few months ago I posted an article about Guess.js. Guess.js is a powerful library for predictive prefetching of JavaScript based on analytics data for a website. The library consumes reports from an analytics source (by default Google Analytics) and builds a basic machine learning model. When a user visits the site, based on the model Guess.js prefetches resources which are likely to be needed next. Thanks to the data-driven approach, Guess.</description>
    </item>
    
    <item>
      <title>Introducing Bazel Schematics for Angular CLI</title>
      <link>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</guid>
      <description>In this blog post, we want to share our new schematics for Angular CLI which provide Bazel build support. You can find the implementation by Keen Liau on GitHub. With the @angular/bazel package, we want to let developers use Angular CLI with Bazel as a build tool.
What&amp;rsquo;s Bazel? Google open sourced the software responsible for building most of our projects under the name Bazel. Bazel is a powerful tool which can keep track of the dependencies between different packages and build targets.</description>
    </item>
    
    <item>
      <title>Building TypeScript Projects with Bazel</title>
      <link>https://blog.mgechev.com/2018/11/19/introduction-bazel-typescript-tutorial/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/11/19/introduction-bazel-typescript-tutorial/</guid>
      <description>In this blog post, we&amp;rsquo;ll make a brief introduction to what Bazel is and how we can build our TypeScript projects with it. If you&amp;rsquo;re already familiar with the problems that Bazel solves, feel free to skip to the section &amp;ldquo;Building TypeScript with Bazel.&amp;rdquo; You can find the example from this blog post in my GitHub account.
Inside Google&amp;rsquo;s CI Google manages a massive amount of source code. There are dependencies between the individual projects, for example, the user interface of Google Cloud depends on Angular &amp;amp; Angular Material, Angular Material depends on Angular, which depends on TypeScript.</description>
    </item>
    
    <item>
      <title>Joining Google</title>
      <link>https://blog.mgechev.com/2018/11/02/joining-google/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/11/02/joining-google/</guid>
      <description>The past five years I&amp;rsquo;ve been heavily involved in the startup space, both, here in the Silicon Valley and Bulgaria. My focus was EdTech, working on different educational products, starting with an app for kids, to a platform for online education, marketing, and sales demos which provides access to a virtual environment in the browser. In the second company called Rhyme, which is particularly exciting and technically challenging, I had the opportunity to join as a co-founder.</description>
    </item>
    
    <item>
      <title>Playing Mortal Kombat with TensorFlow.js. Transfer learning and data augmentation</title>
      <link>https://blog.mgechev.com/2018/10/20/transfer-learning-tensorflow-js-data-augmentation-mobile-net/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/10/20/transfer-learning-tensorflow-js-data-augmentation-mobile-net/</guid>
      <description>While experimenting with enhancements of the prediction model of Guess.js, I started looking at deep learning. I&amp;rsquo;ve focused mainly on recurrent neural networks (RNNs), specifically LSTM because of their &amp;ldquo;unreasonable effectiveness&amp;rdquo; in the domain of Guess.js. In the same time, I started playing with convolutional neural networks (CNNs), which although less traditionally, are also often used for time series. CNNs are usually used for image classification, recognition, and detection.
Controlling MK.</description>
    </item>
    
    <item>
      <title>Fast, extensible, configurable, and beautiful linter for Go</title>
      <link>https://blog.mgechev.com/2018/05/28/revive-golang-golint-linter/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/05/28/revive-golang-golint-linter/</guid>
      <description>About a year ago I decided to polish my Go skills. Although the language is pretty small compared to most others that I use on a daily basis, it still has some useful syntax constructs that I didn&amp;rsquo;t use enough. What a better way to brush up your skills in a programming language other than building tools with it&amp;hellip;for analyzing programs written in it?
You can find revive on GitHub at github.</description>
    </item>
    
    <item>
      <title>Introducing Guess.js - a toolkit for enabling data-driven user-experiences on the Web</title>
      <link>https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/</guid>
      <description>About two months ago I published my initial research[1] on data-driven bundling. A few weeks after that, I had the opportunity to present my work on RenderConf in Oxford, UK in my talk &amp;ldquo;Teach Your Bundler Users&#39; Habits&amp;rdquo;[2].
The original goal of the article was to show how data can help in improving the user-perceived page load performance by using predictive analytics[3]. The artifacts from the article were executable node modules which can be used for predictive pre-fetching &amp;amp; data-driven clustering of JavaScript chunks.</description>
    </item>
    
    <item>
      <title>Machine Learning-Driven Bundling. The Future of JavaScript Tooling.</title>
      <link>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</guid>
      <description>In this article, I&amp;rsquo;ll introduce the early implementation of a few tools which based on techniques from the machine learning allow us to perform data-driven chunk clustering and pre-fetching for single-page applications. The purpose is to provide a zero-configuration mechanism which based on data from Google Analytics for the users&#39; behavior performs the most optimal build. We&amp;rsquo;re also going to introduce a webpack plugin which works with Angular CLI and Create React App.</description>
    </item>
    
    <item>
      <title>JavaScript Decorators for Declarative and Readable Code</title>
      <link>https://blog.mgechev.com/2018/01/29/javascript-decorators-aop-autobind-memoization/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/01/29/javascript-decorators-aop-autobind-memoization/</guid>
      <description>Decorators in JavaScript are now in stage 2. They allow us to alter the definition of a class, method, or a property. There are already a few neat libraries which provide decorators and make our life easier by allowing us to write more declarative code with better performance characteristics.
In this blog post I&amp;rsquo;ll share a few decorators which I&amp;rsquo;m using on a daily basis. We&amp;rsquo;ll take a look at:</description>
    </item>
    
    <item>
      <title>3 Tricks For Using Redux and Immutable.js with TypeScript</title>
      <link>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</guid>
      <description>In this post, I&amp;rsquo;ll show you a few tricks which can make your life using Immutable.js and Redux with TypeScript easier. All the practices are inspired by my recent work on the project Rhyme.com.
Immutable Statically Typed Records Let&amp;rsquo;s start with the definition of our store. For the purpose I prefer to use Immutable records because of two main reasons:
 Immutable stores make the mutation more explicit and well organized.</description>
    </item>
    
    <item>
      <title>Follow Your Dream Career with Open Source. Personal Story.</title>
      <link>https://blog.mgechev.com/2017/12/28/career-development-open-source-get-started/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/12/28/career-development-open-source-get-started/</guid>
      <description>This time I&amp;rsquo;ll violate my principle to write only about purely technical topics on my blog. In the next a couple of paragraphs, I&amp;rsquo;ll talk about open source software development from a personal perspective. Here are some of the ideas that you can find below:
 Explanation what open source software is. The bright sides and dark corners of contributing to open source software projects. Some of the great opportunities that the development of open source software can provide to us, as individuals and professionals.</description>
    </item>
    
    <item>
      <title>Redux Anti-Patterns - Part 1. State Management.</title>
      <link>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</guid>
      <description>For the past year I&amp;rsquo;ve been working on a project which uses React with TypeScript and Redux. In a few blog posts I&amp;rsquo;m planning to share lessons learned while combining these technologies. In this article I&amp;rsquo;ll share a few anti-patterns related to state management that I noticed in our development process. In the second article I&amp;rsquo;ll focus on testability.
All of the anti-patterns below have the following structure:
 Introduction Problem definition Sample solutions with discussion of their pros and cons  State Duplication Sometimes we have instances of the same business entity used in different contexts.</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Understanding Differs. Developing a Custom IterableDiffer</title>
      <link>https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/</guid>
      <description>In this article we&amp;rsquo;ll take a look at another Angular abstraction - the differs and more specifically the IterableDiffer; we&amp;rsquo;ll explain what the differs are and how the framework uses them internally. After that, we&amp;rsquo;ll take a look at how NgForOf works and design a custom data structure optimized for the directive. Finally, we&amp;rsquo;ll develop a custom differ which will speed up the change detection mechanism of Angular when working with large collections.</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Part 2. Pure Pipes, Pure Functions and Memoization</title>
      <link>https://blog.mgechev.com/2017/11/12/faster-angular-applications-pure-pipes-memoization-pure-functions-part-2/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/12/faster-angular-applications-pure-pipes-memoization-pure-functions-part-2/</guid>
      <description>In this post, we&amp;rsquo;ll focus on techniques from functional programming we can apply to improve the performance of our applications, more specifically pure pipes, memoization, and referential transparency. If you haven&amp;rsquo;t read the first part of the &amp;ldquo;Faster Angular Applications&amp;rdquo; series, I&amp;rsquo;d recommend you to take a look at it or at least get familiar with the structure of the business application that we&amp;rsquo;re optimizing.
The code for this blog post is available at my GitHub account:</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Part 1. On Push Change Detection and Immutability</title>
      <link>https://blog.mgechev.com/2017/11/11/faster-angular-applications-onpush-change-detection-immutable-part-1/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/11/faster-angular-applications-onpush-change-detection-immutable-part-1/</guid>
      <description>On AngularConnect 2017 in London, I gave a talk called &amp;ldquo;Purely Fast.&amp;rdquo; In the presentation, I showed how step by step we can improve the performance of a business application. In the example, I incorporated as many performance issues as possible which I faced over the past a couple of years developing enterprise Angular and AngularJS applications. After the presentation, I got great feedback for the content, so I decided to write a series of blog posts which aim to explain the content from &amp;ldquo;Purely Fast&amp;rdquo; in details.</description>
    </item>
    
    <item>
      <title>Understanding Dynamic Scoping and TemplateRef</title>
      <link>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</guid>
      <description>This post will be dedicated to template references in Angular and dynamic scoping. Although the main focus of the article will be understanding TemplateRef we will also touch semantics of programming languages by introducing the concept of scope of name binding.
The code samples for this article can be found in my GitHub account.
Introducing Template References In order to understand TemplateRef lets take a look at the NgForOf directive. Suppose we have a list of puppies and we want to iterate over it in the PuppyListComponent.</description>
    </item>
    
    <item>
      <title>Implementing a Simple Compiler on 25 Lines of JavaScript</title>
      <link>https://blog.mgechev.com/2017/09/16/developing-simple-interpreter-transpiler-compiler-tutorial/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/09/16/developing-simple-interpreter-transpiler-compiler-tutorial/</guid>
      <description>I already wrote a couple of essays related to the development of programming languages that I was extremely excited about! For instance, in &amp;ldquo;Static Code Analysis of Angular 2 and TypeScript Projects&amp;quot;[1] I explored the basics of the front end of the compilers, explaining the phases of lexical analysis, syntax analysis and abstract-syntax trees.
Recently I published &amp;ldquo;Developing Statically Typed Programming Language&amp;quot;[2]. This post shown a simple, statically typed, functional programming language inspired by lambda calculus.</description>
    </item>
    
    <item>
      <title>Developing Statically Typed Programming Language</title>
      <link>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</guid>
      <description>In this blog post we&amp;rsquo;ll go through a sample implementation of a type checker, interpreter and a transpiler for a basic purely functional programming language, which is based on the lambda calculus. We will do a &amp;ldquo;full-stack&amp;rdquo; programming language development by going through formal definition of the language&amp;rsquo;s syntax, semantics and type system. After that we&amp;rsquo;ll demonstrate how we can &amp;ldquo;translate&amp;rdquo; these definitions to JavaScript.
Although the article doesn&amp;rsquo;t require any mathematical background, it&amp;rsquo;ll be useful to have high-level understanding of how compilers work.</description>
    </item>
    
    <item>
      <title>WebVR for a Gamified IDE</title>
      <link>https://blog.mgechev.com/2017/06/25/virtual-reality-for-a-gamified-ide-ngworld-angular/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/06/25/virtual-reality-for-a-gamified-ide-ngworld-angular/</guid>
      <description>In the first part of this blog post I discuss the idea of using virtual reality for gamification of manual tasks in the software development process. I introduce a demo project which allows source code visualization and manipulation in a generated Minecraft-like virtual reality. My initial presentation of the demo project was on ngconf 2017, and the project&amp;rsquo;s extension I presented on AngularUP 2017 during my talks &amp;ldquo;Mad Science with the Angular Compiler&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>7 Angular Tools That You Should Consider</title>
      <link>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</guid>
      <description>In this article we&amp;rsquo;re going to quickly explore 7 Angular development tools which can make our everyday life easier. The purpose of the list is to not be opinionated architecture wise. This means that we&amp;rsquo;re not going to discuss tooling which has impact over our choice of application state management, data layer, etc. For instance, although packages like ngrx/store devtools, universal, and others are amazing once we&amp;rsquo;ve chosen a specific architectural approach, we&amp;rsquo;re going to keep them out of this article because they assume we&amp;rsquo;re using a specific way of state management or application rendering.</description>
    </item>
    
    <item>
      <title>Announcing ngrev - Reverse Engineering Tool for Angular</title>
      <link>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</guid>
      <description>Have you ever been hired to work on a huge legacy Angular project with thousands of NgModules, components, directives, pipes and services? Neither do I. Angular (2 and above) is still relatively new framework and there are not many enormous projects out there. On the other hand, Angular is powerful and in combination with TypeScript we can build big, enterprise applications.
Exploring an Application It&amp;rsquo;s hard to start digging into a large codebase without being aware of the overall structure of the project.</description>
    </item>
    
    <item>
      <title>Implementing Angular&#39;s Dependency Injection in React. Understanding Element Injectors.</title>
      <link>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</guid>
      <description>Recently I&amp;rsquo;ve been blogging mostly about Angular and it&amp;rsquo;s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I&amp;rsquo;m working on have various of different requirements and sometimes I need to consider different options.
Another great technology that I&amp;rsquo;ve used in the past is React. I don&amp;rsquo;t want to compare it with Angular; I&amp;rsquo;m sure there are variety of cases when one of them fits better compared to the other and visa versa.</description>
    </item>
    
    <item>
      <title>Distributing an Angular Library - The Brief Guide</title>
      <link>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</guid>
      <description>In this post I&amp;rsquo;ll quickly explain the minimum you need to know in order to publish an Angular component to npm. By the end of the post you&amp;rsquo;ll know how your module can:
 Be platform independent (i.e. run in Web Workers, Universal). Should be bundled and distributed. Work with the Angular&amp;rsquo;s Ahead-of-Time compiler. Play well with TypeScript by allowing autocompletion and compile-time type checking.  If you&amp;rsquo;re only interested in a quick checklist of things you need to consider for distributing your Angular library, go directly to the &amp;ldquo;Distributing an Angular Library - Checklist&amp;rdquo; section.</description>
    </item>
    
    <item>
      <title>Angular in Production</title>
      <link>https://blog.mgechev.com/2017/01/17/angular-in-production/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/17/angular-in-production/</guid>
      <description>In this informal essay I&amp;rsquo;ll go through a case study of my experience in using Angular (2 and above) in production.
Last April, together with a small team, we started working on an educational application; the second version of a product that I developed about 3 years ago using Angular 1.
The product targets young kids and their parents. It&amp;rsquo;s purpose is to motivate kids to learn maths by earning rewards.</description>
    </item>
    
    <item>
      <title>Ahead-of-Time Compilation in Angular</title>
      <link>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</guid>
      <description>Recently I added Ahead-of-Time (AoT) compilation support to angular-seed and got a lot of questions about the new feature. In order to answer most of them, we will start from the beginning by explaining the following topics:
 Why we need compilation in Angular? What needs to be compiled? How it gets compiled? When the compilation takes place? Just-in-Time (JiT) vs Ahead-of-Time (AoT). What we get from AoT? How the AoT compilation works?</description>
    </item>
    
    <item>
      <title>2.5X Smaller Angular 2 Applications with Google Closure Compiler</title>
      <link>https://blog.mgechev.com/2016/07/21/even-smaller-angular2-applications-closure-tree-shaking/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/07/21/even-smaller-angular2-applications-closure-tree-shaking/</guid>
      <description>In the post &amp;ldquo;Building an Angular 2 Application for Production&amp;rdquo; we explored how we can decrease the bundle size of a &amp;ldquo;Hello world!&amp;rdquo; application to from about 1.6M (non-minified &amp;amp; uncompressed) to 49K! We did this by using the following techniques:
 Angular offline template compiler for generating tree-shakable code. Tree-shaking of ES2015 modules with rollup. Bundling of the application. Minification with uglifyjs. Compression with gzip.  Although we achieved impressive results we can do even better!</description>
    </item>
    
    <item>
      <title>Using Stripe with Angular (Deprecated)</title>
      <link>https://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</guid>
      <description>The content in this post uses deprecated APIs To learn about the latest version of the Stripe APIs check out their documentation page.  #post-body { color: #bbb; } .deprecation-notice { color: black; }  Stripe offer a set of APIs which allow businesses and individuals to easily accept and manage payments online. In a typical scenario you want your users to pay for a service that you&amp;rsquo;re offering using Stripe as a mediator.</description>
    </item>
    
    <item>
      <title>Building an Angular Application for Production</title>
      <link>https://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</guid>
      <description>Progressive Web Applications help us build native-like web apps, thanks to amazing tools such as Service Workers, IndexDB, App Shell etc. Once the browser downloads all the static assets required by our app, the active Service Worker can cache them locally.
This way the user may experience slowdown during the initial page load, but each next time she opens the application her experience will be instant!
In order to help developers take advantage of the technologies behind the PWA as easy as possible, the Angular team is working on the Angular mobile-toolkit.</description>
    </item>
    
    <item>
      <title>Implementing the Missing &#34;resolve&#34; Feature of the Angular 2 Router</title>
      <link>https://blog.mgechev.com/2016/05/21/angular2-router-implementing-missing-resolve-feature-deprecated-defer/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/05/21/angular2-router-implementing-missing-resolve-feature-deprecated-defer/</guid>
      <description>For the last a couple of months I&amp;rsquo;m working on an Angular 2 based PWA. The more complex the application gets, the more I appreciate that our choice was Angular! For routing we&amp;rsquo;re using the initial Angular 2 router that is now deprecated. For sure we will migrate to the newest one once it gets stable but until then we have some problems to solve.
One of the features that I miss most in both the new and the newest Angular 2 routes is the resolve functionality which the AngularJS 1.</description>
    </item>
    
    <item>
      <title>Scalable Single-Page Application Architecture</title>
      <link>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</guid>
      <description>In order to have better understanding of the following blog post you should be familiar with the fundamentals of the object-oriented and functional programming. I also strongly encourage you to explore the redux pattern.
A couple of months ago I started working on the first version of a Silicon Valley-based startup. The project is a single-page application with quite dynamic business requirements. As in most modern single-page applications we have a fat client which encapsulates decent amount of business logic and state.</description>
    </item>
    
    <item>
      <title>Managing ambient type definitions and dealing with the &#34;Duplicate identifier&#34; TypeScript error</title>
      <link>https://blog.mgechev.com/2016/03/28/ambient-type-definitions-duplicate-identifier-typescript-fix/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/03/28/ambient-type-definitions-duplicate-identifier-typescript-fix/</guid>
      <description>Maintaining the angular-seed, I found out that the most common problem for developers using the project is:
Duplicate identifier &amp;#39;export=&amp;#39;. (2300) compilation error.
In this quick tutorial I&amp;rsquo;ll show what does this error mean and how you can fix it. In order to get better understanding of the problem we&amp;rsquo;ll discuss the differences between TypeScript and JavaScript, as well as ambient type definitions and @types.
Intro Before getting any further we need to tell a few words about the ambient type definitions of TypeScript.</description>
    </item>
    
    <item>
      <title>Static Code Analysis of Angular 2 and TypeScript Projects</title>
      <link>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</guid>
      <description>So far, most of the blog posts I&amp;rsquo;ve written are tutorials; they explain how we can use given technologies, architectures, algorithm etc. For instance:
 Flux in Depth. Store and Network Communication. ViewChildren and ContentChildren in Angular 2 Build Your own Simplified AngularJS in 200 Lines of JavaScript Remote Desktop Client with AngularJS and Yeoman  The code for the current research could be found here and here.
The current post is about an exciting project I am working on in my spare time.</description>
    </item>
    
    <item>
      <title>Enforcing Best Practices with Static Code Analysis of Angular 2 Projects</title>
      <link>https://blog.mgechev.com/2016/02/18/angular2-style-guide-best-practices-lint-tslint/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/02/18/angular2-style-guide-best-practices-lint-tslint/</guid>
      <description>About two weeks ago I published the initial draft of a Community-driven Angular 2 Style Guide. It was based on:
 Patterns I noticed in the Angular 2 source code while contributing to the framework. Suggestions by Miško Hevery during his technical review of my book &amp;ldquo;Switching to Angular 2&amp;rdquo;. My own development experience with Angular 2. AngularJS 1.x common practices which could be applied to Angular 2 applications keeping the transition process smoother.</description>
    </item>
    
    <item>
      <title>ViewChildren and ContentChildren in Angular</title>
      <link>https://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</guid>
      <description>In this article I&amp;rsquo;m going to explain the difference between the concepts of view children and content children in Angular. We will take a look at how we can pass access these two different kinds of children from their parent component. Along the content we are also going to mention what the difference between the properties providers and viewProviders of the @Component decorator is.
You can find the source code of the current article at my GitHub account.</description>
    </item>
    
    <item>
      <title>Dynamically Configuring the Angular&#39;s Router</title>
      <link>https://blog.mgechev.com/2015/12/30/angular2-router-dynamic-route-config-definition-creation/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/12/30/angular2-router-dynamic-route-config-definition-creation/</guid>
      <description>Warning: This version of the Angular 2 router is now deprecated! This means that soon the used below APIs will no longer be available.  A couple of months ago I wrote &amp;ldquo;Lazy Loading of Route Components in Angular 2&amp;rdquo;, where I explained how we can take advantage of the AsyncRoutes and the virtual proxy pattern in Angular 2.
This way we can incrementally load the entire application by only requesting the resources required for the individual views.</description>
    </item>
    
    <item>
      <title>Angular 2 Hot Loader</title>
      <link>https://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</guid>
      <description>A couple of months ago I watched a few talks from ReactEurope. I was truly impressed by a few of them and especially by the one by Dan Abramov on redux and his hot loader. The tool he shown helps you do something similar to live-reload with one big difference. When you change the code of any of the components in your react application, the new version of the component is send to the application itself where all its instances are patched so the changes you did to be visible.</description>
    </item>
    
    <item>
      <title>Lazy Loading of Route Components in Angular 2</title>
      <link>https://blog.mgechev.com/2015/09/30/lazy-loading-components-routes-services-router-angular-2/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/09/30/lazy-loading-components-routes-services-router-angular-2/</guid>
      <description>Warning: This version of the Angular 2 router is now deprecated! This means that soon the used below APIs will no longer be available.  For the examples in the content below I&amp;rsquo;ve used the angular2-seed project. The code for the article could be found at my GitHub account.
This blog post is mostly about performance and more accurately - lazy loading. Before we get started lets make a quick recap of what problem we&amp;rsquo;re about to solve.</description>
    </item>
    
    <item>
      <title>Aspect-Oriented Programming in JavaScript</title>
      <link>https://blog.mgechev.com/2015/07/29/aspect-oriented-programming-javascript-aop-js/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/07/29/aspect-oriented-programming-javascript-aop-js/</guid>
      <description>Note: The following blog post is based on the library aspect.js, which can be found here.
The object-oriented programming paradigm is powerful. We design an OO system by decomposition of the problem domain, following guiding principles concerning the decomposition and the communication between the different modules. The process is structured; it involves logical thinking, understanding of the domain and eventual predictions for the future evolution of the system. Often we&amp;rsquo;re trying to keep our code DRY (not always), highly coherent and loosely coupled.</description>
    </item>
    
    <item>
      <title>Flux in Depth. Store and Network Communication.</title>
      <link>https://blog.mgechev.com/2015/07/18/flux-in-depth-store-network-communication-services/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/07/18/flux-in-depth-store-network-communication-services/</guid>
      <description>This is the second, and probably be the last, blog post of the series &amp;ldquo;Flux in Depth&amp;rdquo;. In the first post we did a quick overview of flux, took a look at the stateless, pure components, immutable data structures and component communication. This time, we&amp;rsquo;re going to introduce the store and how we can communicate with services through the network via HTTP, WebSocket or WebRTC. Since the flux architecture doesn&amp;rsquo;t define a way of communication with external services, here you can find my way of dealing with network communication.</description>
    </item>
    
    <item>
      <title>Using JSX with TypeScript</title>
      <link>https://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</guid>
      <description>JavaScript is a weird language although, we love it the way it is. However, I&amp;rsquo;ve had quite a painful experience working on big JavaScript projects. It was painful in the same way it gets painful working on huge Ruby, Python, PHP projects.
Once you have code base above 10-15k lines of code and you decide to do some refactoring&amp;hellip;well it gets messy. Although grep and sed are powerful tools for text manipulation, when you start replacing code with them, you&amp;rsquo;re missing the semantics (or the context) of the snippets you substitute.</description>
    </item>
    
    <item>
      <title>Flux in Depth. Overview and Components.</title>
      <link>https://blog.mgechev.com/2015/05/15/flux-in-depth-overview-components/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/05/15/flux-in-depth-overview-components/</guid>
      <description>This is the first blog post of the series &amp;ldquo;Flux in Depth&amp;rdquo;. Is this &amp;ldquo;yet the another flux tutorial&amp;rdquo;? What I have seen so far, while researching flux, were mostly &amp;ldquo;how-to&amp;rdquo; tutorials (usually with todo applications), which describe the main components of given flux application and the data flow between them. This is definitely useful for getting a high-level overview of how everything works but in reality there are plenty of other things, which should be taken under consideration.</description>
    </item>
    
    <item>
      <title>Even Faster AngularJS Data Structures</title>
      <link>https://blog.mgechev.com/2015/04/20/fast-angular-data-structures-versionable/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/04/20/fast-angular-data-structures-versionable/</guid>
      <description>This is the last post of the series &amp;ldquo;Boost the Performance of an AngularJS Application Using Immutable Data&amp;rdquo;. I strongly recommend you to take a look at the previous two parts before continue reading this content. You can find them at:
 Part 1 Part 2  Introduction Before about a month ago, I decided to experiment using immutable data structures in an AngularJS application. The goal behind my decision was quite simple - optimization of the $digest loop.</description>
    </item>
    
    <item>
      <title>Boost the Performance of an AngularJS Application Using Immutable Data - Part 2</title>
      <link>https://blog.mgechev.com/2015/04/11/immutability-in-angularjs-immutablejs-part-2/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/04/11/immutability-in-angularjs-immutablejs-part-2/</guid>
      <description>A few weeks ago I posted the article &amp;ldquo;Boost the Performance of an AngularJS Application Using Immutable Data&amp;rdquo;. It shows how to speedup your AngularJS application when having a lot of bindings to big data collections. The idea behind the optimization is quite simple - create a new collection when the data changes. This way you can reduce the watchers execution from O(n) to O(1).
In the post I did simple profiling using the built-in Date but it didn&amp;rsquo;t give enough information in exactly which cases it is more suitable to use immutable data and when you should bet on the standard collections.</description>
    </item>
    
    <item>
      <title>Angular2 - First Impressions</title>
      <link>https://blog.mgechev.com/2015/04/06/angular2-first-impressions/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/04/06/angular2-first-impressions/</guid>
      <description>On 18th of September 2014 was pushed the initial commit of version 2.0 of the AngularJS framework. A few weeks ago the core team at Google, published AngularJS&#39; 2.0 website and gave a couple of talks on ng-conf about their new router, change detection, templating, etc. I&amp;rsquo;m passionate about AngularJS since its early versions so I decided give it a try using the quick start. In the meantime I and also created an angular2-seed project for my test, dummy projects.</description>
    </item>
    
    <item>
      <title>Build Your own Simplified AngularJS in 200 Lines of JavaScript</title>
      <link>https://blog.mgechev.com/2015/03/09/build-learn-your-own-light-lightweight-angularjs/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/03/09/build-learn-your-own-light-lightweight-angularjs/</guid>
      <description>My practice proved that there are two good/easy ways to learn a new technology:
 Re-implement it by your own See how the concepts you already know fit in it  In some cases the first approach is too big overhead. For instance, if you want to understand how the kernel works it is far too complex and slow to re-implement it. It might work to implement a light version of it (a model), which abstracts components that are not interesting for your learning purposes.</description>
    </item>
    
    <item>
      <title>Persistent State of ReactJS Component</title>
      <link>https://blog.mgechev.com/2015/03/05/persistent-state-reactjs/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/03/05/persistent-state-reactjs/</guid>
      <description>ReactJS is a framework, by facebook, which adds some well known concepts into the UI development. Each UI could be represented as a state machine but when the state of this state machine could be changed from a lot of places everything gets quite messy, complex and buggy. Given view may be rendered differently with the same model passed as parameter if it depends on some global data. A properly implemented ReactJS component, will be rendered the same way when the same &amp;ldquo;input parameters&amp;rdquo; are passed to it.</description>
    </item>
    
    <item>
      <title>Boost the Performance of an AngularJS Application Using Immutable Data</title>
      <link>https://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/</guid>
      <description>I have affinity to functional programming since my first year in college. During my initial contact with a purely functional programming language (Haskell in my case) I didn&amp;rsquo;t really understand all the advantages it provides, everything was reduced to just writing a cool recursive functions and solving algorithmic problems.
Later, when my code was used in production, I started appreciating things like high-order functions, closures, currying, etc. I even wrote a blog post on topic &amp;ldquo;Functional programming with JavaScript&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Processing Binary Protocols with Client-Side JavaScript</title>
      <link>https://blog.mgechev.com/2015/02/06/parsing-binary-protocol-data-javascript-typedarrays-blobs/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/02/06/parsing-binary-protocol-data-javascript-typedarrays-blobs/</guid>
      <description>Last couple of weeks I&amp;rsquo;m trying to build high-performance consumption of binary protocol through the browser. The protocol is running over TCP. In the perfect world I&amp;rsquo;d be talking with the remote TCP server, through TCP sockets, connecting directly from the client-side JavaScript and consuming the received binary data.
Because of limitations of the client-side API, JavaScript doesn&amp;rsquo;t has access to plain TCP sockets, there&amp;rsquo;s no full happiness. The second best option would be to use intermediate proxy, which:</description>
    </item>
    
    <item>
      <title>Stream your Desktop to HTML5 Video Element</title>
      <link>https://blog.mgechev.com/2014/12/31/stream-desktop-html5-video-vlc/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/12/31/stream-desktop-html5-video-vlc/</guid>
      <description>In this blog post I&amp;rsquo;ll share how you can stream your desktop to HTML5 video element.
All you need is VLC video player and web browser, which supports HTML5.
How to&amp;hellip; Open VLC and select &amp;ldquo;Open Capture Device&amp;rdquo;:
As next step chose &amp;ldquo;Capture&amp;rdquo; and from the drop down below select &amp;ldquo;Screen&amp;rdquo;. Adjust the frame rate and mark the checkbox &amp;ldquo;Streaming/Saving:&amp;quot;
Click settings and select that you want to &amp;ldquo;Stream&amp;rdquo; the video (from the radio buttons), after that for stream type select &amp;ldquo;HTTP&amp;rdquo; and for &amp;ldquo;Encapsulation Method&amp;rdquo; &amp;ldquo;OGG&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Multi-User Video Conference with WebRTC</title>
      <link>https://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/</guid>
      <description>This is a tutorial for how to implement a multi-user video conference with WebRTC, AngularJS and Yeoman. It also includes a detailed explanation of how WebRTC works, how the peer to peer connections are being established and how the ICE (Interactive-Connectivity Establishment) framework is used for NAT traversal.
You can find deployed version of the project, we&amp;rsquo;re going to take a look at in this tutorial, at Heroku, the source code can be found at GitHub.</description>
    </item>
    
    <item>
      <title>Asynchronous calls with ES6 generators</title>
      <link>https://blog.mgechev.com/2014/12/21/handling-asynchronous-calls-with-es6-javascript-generators/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/12/21/handling-asynchronous-calls-with-es6-javascript-generators/</guid>
      <description>ES6 generators have landed in Chrome 39 Beta on 9th of October and are already available in the stable version. This means that brand new development practices are already applicable, although for supporting older browsers you might need to fallback to the traceroute compiler.
A cool module, which TJ developed, called co, is available for quite a while (his initial commit in the co repository was on 6th of June 2013).</description>
    </item>
    
    <item>
      <title>Binary Tree iterator with ES6 generators</title>
      <link>https://blog.mgechev.com/2014/09/12/binary-tree-iterator-with-es6-generators/</link>
      <pubDate>Fri, 12 Sep 2014 19:07:34 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/09/12/binary-tree-iterator-with-es6-generators/</guid>
      <description>ES6 specification is being clarified every passed day! One of the key features of the new version of the language are the generators. Generators (a.k.a. semicoroutines) will play quite important role after they are being officially released. They could be used to simplify the asynchronous control flow of any JavaScript program (look at co). Another important role is using them for creating iterators.
In this blog post we are going to take a look at how could be implemented iterator of binary search tree using the ES6 generators.</description>
    </item>
    
    <item>
      <title>WebRTC chat with React.js</title>
      <link>https://blog.mgechev.com/2014/09/03/webrtc-peer-to-peer-chat-with-react/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/09/03/webrtc-peer-to-peer-chat-with-react/</guid>
      <description>In this blog post I&amp;rsquo;m going to share how could be build WebRTC chat with React.js. Before we continue lets describe briefly what React.js and WebRTC are.
The application from this tutorial is available at GitHub.
React.js React.js is reactive JavaScript framework, which helps you to build user interface. Facebook states that we can think of React as the &amp;ldquo;V&amp;rdquo; in MVC. React&amp;rsquo;s main aspect is the state. When the state of the application changes this automatically propagates through the application&amp;rsquo;s components.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 3)</title>
      <link>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</guid>
      <description>This publication aims to provide a more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.  Link to the first part of the series. Link to the second part of the series.
This is the last blog post of the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 2). Services.</title>
      <link>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</guid>
      <description>This publication aims to provide a more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.  Link to the first part of the series.
This blog post continues the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you like my work you can follow me at github.</description>
    </item>
    
    <item>
      <title>Using GitHub Pages with Jekyll!</title>
      <link>https://blog.mgechev.com/2014/05/28/welcome-to-jekyll/</link>
      <pubDate>Wed, 28 May 2014 16:36:34 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/05/28/welcome-to-jekyll/</guid>
      <description>I&amp;rsquo;m switching to GitHub pages with Jekyll. There are several reasons behind my decision:
 Faster! - static HTML is much faster than my old WordPress blog. Lighter - Jekyll is much more minimalistic than WordPress, it has all I need and in the same time it is not too much. I can use VIM! - I can use my favorite text editor in order to:   configure my blog write blog posts  Reliable hosting - last a couple of yeas I pay for hosting, which is not reliable enough.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 1). Overview of AngularJS</title>
      <link>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</guid>
      <description>In this series of blog posts I’m going to cover the paper I’m writing at GitHub.
It aims to provide a bit more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.
Part one includes only a high level overview of AngularJS, enjoy it.
AngularJS overview AngularJS is JavaScript framework developed by Google.</description>
    </item>
    
    <item>
      <title>Singleton in JavaScript</title>
      <link>https://blog.mgechev.com/2014/04/16/singleton-in-javascript/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/04/16/singleton-in-javascript/</guid>
      <description>Wikipedia describes the singleton design pattern as:
 The singleton pattern is a design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton.</description>
    </item>
    
    <item>
      <title>Express over HTTPS</title>
      <link>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</guid>
      <description>Sometimes you want to test your application in environment closer to the real world. In such cases you might need to run it over TLS.
Here are two simple steps, which can be used to achieve this result:
Generate self-signed certificate If you don’t already have certificate you need to generate one:
$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 You will be asked a couple of questions&amp;hellip; In this case we generated a self-signed certificate for 365 days.</description>
    </item>
    
    <item>
      <title>What I get from the JavaScript MV* frameworks</title>
      <link>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</guid>
      <description>Why should I use JavaScript MVC, MVVM, MVP or simply MVW(hatever works for you)?
When I talk with people, who are beginners/intermediate in JavaScript I’m often asked this question. They are usually people who, until now, have used JavaScript only for making their website “fancier” – adding client-side form validation, creating carousel, checking whether a user already exists with simple Ajax request. When you start building something bigger (+10k lines of JavaScript) I truly believe that there are a few benefits from using such micro-architectural frameworks.</description>
    </item>
    
    <item>
      <title>Remote Desktop Client with AngularJS and Yeoman</title>
      <link>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</guid>
      <description>In this blog post I’m going to show you how to build a VNC client using AngularJS and Yeoman. The source code used in the post is available at my GitHub. Click here to see the final result.

It seems I have affinity to the remote desktop protocols, because this is my third project at GitHub, which implements one (VNC client on 200 lines of JavaScript, VNC client for Chrome DevTools and VNC client with AngularJS).</description>
    </item>
    
    <item>
      <title>The magic of $resource (or simply a client-side Active Record)</title>
      <link>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</guid>
      <description>At first sight AngularJS seems like a magical framework, which does some weird but awesome things like dependency injection, data binding only by setting a single property to the magical object named $scope and many other things.
If you look at the source code of Angular you’ll see a lot of smart and simple solutions for these magical problems. In this blog post I’ll describe the magic which stays behind $resource.</description>
    </item>
    
    <item>
      <title>AngularJS Inheritance Patterns</title>
      <link>https://blog.mgechev.com/2013/12/18/inheritance-services-controllers-in-angularjs/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/12/18/inheritance-services-controllers-in-angularjs/</guid>
      <description>Since AngularJS does not provide any built-in features for using inheritance, in this blog post I’ll describe how the general JavaScript inheritance patterns can be applied to AngularJS components.
Controllers inheritance First, lets talk about controllers. Actually it is very unlikely to inherit from parent controller (except when you&amp;rsquo;re using the controller as syntax, see below). This is the case because by implementation the scope in the child controller will inherit prototypically from its parent scope.</description>
    </item>
    
    <item>
      <title>AngularAOP v0.1.0</title>
      <link>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</guid>
      <description>In this blog post I’ll introduce you the new way of annotating services included in AngularAOP v0.1.0.
First, why we need a new way for annotation? In v0.0.1 the annotations were made in services’ bodies. It was something like this:
myApp.factory(&amp;#39;AwesomeService&amp;#39;, function (execute, d1, d2,...,dn) { var api = /* definition of our service api */ return execute(Logger).onThrowOf(execute(Authorization).before(api, { methodPattern: /Special|getArticleById/, argsPatterns: [/^user$/, /^[Ii]d(_num)?$/] })); }); This way of annotating services led to coupling between the services and the API of the AngularAOP’s aspect factory service called execute.</description>
    </item>
    
    <item>
      <title>Advanced JavaScript at Sofia University</title>
      <link>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</guid>
      <description>In this blog post I’ll tell few words about the course Advanced JavaScript which Georgi Penkov, Evgeni Kunev and me are leading this semester in Sofia University.
I was included as a lecturer in it after my project for Practical Programming with Perl (plainvm) which is created by Georgi Penkov. The idea behind the course is not to concentrate on the syntax of JavaScript but to introduce to the students different modern technologies.</description>
    </item>
    
    <item>
      <title>AngularJS style guide</title>
      <link>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</guid>
      <description>Today I created a GitHub repository which contains a set of good practices and style guides for AngularJS application development.
Its main goal is to be community-driven and to concentrate all the best practices for AngularJS development in one place.
I’ve collected these guidelines mostly from my own experience and the source code of AngularJS. I guess there are missing things thats why I’ll try to fill the gaps in future.</description>
    </item>
    
    <item>
      <title>Lazy prefetching of AngularJS partials</title>
      <link>https://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/</guid>
      <description>This blog post is concentrated about web performance. I’ll skip the well known stuff about combining images into sprites, inlining images, DNS pre-fetching, combining and minifying script files, gzipping and so on. There are plenty of articles and tools which will help you about these things. There are also excellent researches on these topics, few of the best I’ve read are these by Mobify, Web Performance Daybook Volume, High Performance Web Sites and Critical rendering path – Crash course on web performance and many others.</description>
    </item>
    
    <item>
      <title>VNC client on 200 lines of JavaScript</title>
      <link>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</guid>
      <description>In this quick blog post I’ll show you how to create a simple VNC client in about 200 lines of JavaScript. For our goal we’re going to use only HTML5 and JavaScript (client and server side). The end result will be something like this:

So, let’s begin!
Our application will have very simple architecture – a proxy server written in Node.js and a client in HTML5 and JavaScript. The Node.</description>
    </item>
    
    <item>
      <title>Aspect-Oriented Programming with AngularJS</title>
      <link>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</guid>
      <description>In the following blog post I’ll write few words about what is Aspect-Oriented Programming, why I think it will be useful in AngularJS and I’m also going to give you a short tutorial for using a simple AOP framework I’ve developed.
First things first. What is AOP? As we all know OOP is awesome! It gives us many tools for making our development process simpler. Its core principles are Abstraction, Encapsulation, Inheritance and Polymorphism.</description>
    </item>
    
    <item>
      <title>CSS3 flipping effect</title>
      <link>https://blog.mgechev.com/2013/05/04/css3-flipping-effect/</link>
      <pubDate>Sat, 04 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/05/04/css3-flipping-effect/</guid>
      <description>As you know because of the SIMD nature of the GPU it’s extremely good for graphical calculations. Since HTML5 and CSS3 are here we have a couple of ways for efficient and smooth animations one of them are the CSS3 transitions.
Before few days I needed a CSS3 flipping effect which should works at least in IE10, Chrome 25+ and Firefox. I tried different demos which I found in the web but there were couple of issues with them.</description>
    </item>
    
    <item>
      <title>Practical programming with JavaScript</title>
      <link>https://blog.mgechev.com/2013/04/24/practical-programming-with-javascript/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/04/24/practical-programming-with-javascript/</guid>
      <description>Before few months I was invited by Telerik Academy to make a talk about JavaScript. Last Monday Marian Kostadinov, Radoslav Georgiev and me made a whole seminar about the topic. I’m addicted to the Object-Oriented programming so I choose to talk about that. You can find my slides at https://blog.mgechev.com/slides/javascript-patterns and a video (in Bulgarian) below in the post:
It was quite exciting for me to speak about this topic in front of about 200 people.</description>
    </item>
    
    <item>
      <title>Why I should use publish/subscribe in JavaScript</title>
      <link>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</guid>
      <description>This post is inspired by my answer at StackOverflow.
So why we should use publish/subscribe? Why it is useful? Is it making our work harder or it makes our application better?
And the answer&amp;hellip;
It’s all about loose coupling and single responsibility, which goes hand to hand with MV* (MVC/MVP/MVVM) patterns in JavaScript which are very modern in the last few years.
Loose coupling is an Object-oriented principle in which each component of the system knows it’s responsibility and don’t care about the other components (or at least tries to not care about them as much as possible).</description>
    </item>
    
    <item>
      <title>JavaScript, the weird parts</title>
      <link>https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/</link>
      <pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/</guid>
      <description>To say that JavaScript is becoming more and more popular is such a typical and boring way to start such an awesome post&amp;hellip;Anyway, JavaScript is becoming more and more popular each day&amp;hellip;There’s client-side JavaScript with awesome API, you can do whatever you wish with it – write 3D games, stream video and audio, process files&amp;hellip;There’s also a server-side JavaScript which is also awesome (I guess awesome will be a common word for this post).</description>
    </item>
    
    <item>
      <title>Functional programming with JavaScript</title>
      <link>https://blog.mgechev.com/2013/01/21/functional-programming-with-javascript/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/21/functional-programming-with-javascript/</guid>
      <description>This article is about the functional concepts of JavaScript. Some of them are built-in the languages, others extra implemented but all of them are very common for purely functional languages like Haskell. First I want to tell what I mean with the term purely functional language. These languages are “safe”, they will not make side effect i.e. evaluating an expression won’t change something in the internal state and lead to different result of the same expression when called next time.</description>
    </item>
    
    <item>
      <title>plainvm</title>
      <link>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvm can take the virtualization into different level of usage. To prove this I’ll first ask few rhetorical questions and put their answers&amp;hellip;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;hellip;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) – the browser.</description>
    </item>
    
    <item>
      <title>Looking for performance? Probably you should NOT use [].sort (V8)</title>
      <link>https://blog.mgechev.com/2012/11/24/javascript-sorting-performance-quicksort-v8/</link>
      <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/11/24/javascript-sorting-performance-quicksort-v8/</guid>
      <description>A few days ago, I’ve created a GitHub repository. It’s main goal was to collect different algorithms with implementations in JavaScript. I started with basic ones – sorting (insertion, selection, bubble sort..). After that I implemented few “more advance” like marge, quick and heap sort. It was interesting to me how much slower my implementation will be compared to the default sort. It was so interesting because of:
function sort() { [native code] } That’s why I’ve wrote not optimized version of mergesort and I’ve run it with generated array with 500k elements.</description>
    </item>
    
    <item>
      <title>JavaScript image scaling</title>
      <link>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</link>
      <pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</guid>
      <description>I haven’t wrote here for a while so I decided to write about something more practical. Actually the idea for the post come from one my response in stackoverflow. The post is connected with pure client side image scaling. While you’re reading the example I hope that you’ll see how powerful is the HTML5 API and how with few lines of code you can do something which in other technologies is much more complex.</description>
    </item>
    
    <item>
      <title>ELang</title>
      <link>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</guid>
      <description>And one more blog post by me! It’s going to be in brand new topic than the others. For about an year and a half I’ve got an idea which I wanted to accomplish&amp;hellip;To create my own simple programming language. Actually it’s very useful task and quite interesting. Creating it you can get better understanding how the compilers and interpreters work and probably write better code. Unfortunately there were two problems&amp;hellip;I didn’t have enough time for such task and&amp;hellip;I’ve not studied formal grammars (and as I mentioned I don’t have enough time to study them&amp;hellip;there are just so much more interesting things to read about :-P ).</description>
    </item>
    
    <item>
      <title>Caching CSS with localStorage</title>
      <link>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</link>
      <pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</guid>
      <description>Since HTML5 became wide supported the most popular aspects I hear about were it’s canvas, WebSockets and localStorage. I’ve got very close experience with the first two of the mentioned but the localStorage was somehow unknown for me since a month. I’ve researched the topic. Actually it’s quite interesting and useful as you might guess. Using localStorage you can save different kinds of data locally into key-value pairs. The data lives on your local machine until it’s deleted (cleared).</description>
    </item>
    
    <item>
      <title>Self-invoking functions in JavaScript (or Immediately Invoked Function Expressions)</title>
      <link>https://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/</link>
      <pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/</guid>
      <description>There are a lot of interesting things in the syntax of JavaScript, one of which is the definition of self-executing (self-invoking) functions. Here&amp;rsquo;s how we can defined such function:
(function () { // body of the function }()); The anonymous function above will be invoked right after it has been defined. The benefit of self-invoking functions is that they enable us to execute code once without cluttering the global namespace (without declaring any globals).</description>
    </item>
    
    <item>
      <title>Asus N56VZ &#43; Ubuntu 12.04 (en)</title>
      <link>https://blog.mgechev.com/2012/08/19/asus-n56vz-ubuntu-12-04-en/</link>
      <pubDate>Sun, 19 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/08/19/asus-n56vz-ubuntu-12-04-en/</guid>
      <description>It seems that it’s common a problem to setup Ubuntu on the new Asus N56VZ so I decided to create an English version of my post.
I was struggling with three issues about two weeks. Here are they:
 Multimedia buttons (Fn+F*) Subwoofer Ethernet adapter  I’ll start with the Subwoofer issue because it’s with the easiest fix. Adding **options snd-hda-intel model=asus-mode4 **at the end of /etc/modprobe.d/alsa-base.conf  will solve the problem.</description>
    </item>
    
    <item>
      <title>Asus N56VZ &#43; Ubuntu 12.04</title>
      <link>https://blog.mgechev.com/2012/07/22/asus-n56vz-ubuntu-12-04/</link>
      <pubDate>Sun, 22 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/07/22/asus-n56vz-ubuntu-12-04/</guid>
      <description>Един пост на български, защото мисля, че ще бъде по-полезен.
Доста време се тормозя с подкарването на разни feature-и на новия ми Asus N56 с Ubuntu 12.04 x86-64&amp;hellip;Мултимедия бутоните (комбинация между Fn+F*), съббуфера, като имах известни проблеми (не особени, но все пак трябва да се отбележат) и с ethernet.
И така, нека започна от съббуфера, защото решението е най-лесно. Добавянето на options snd-hda-intel model=asus-mode4 в края на /etc/modprobe.d/alsa-base.conf, решава проблема.</description>
    </item>
    
    <item>
      <title>Debian Squeeze &#43; LXDE on Google Nexus S (or having some fun while suffering)</title>
      <link>https://blog.mgechev.com/2012/07/08/debian-squeeze-lxde-on-google-nexus-s-or-having-some-fun-while-suffering/</link>
      <pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/07/08/debian-squeeze-lxde-on-google-nexus-s-or-having-some-fun-while-suffering/</guid>
      <description>I’m here again, after a long pause. For a while I’ve got problems with my health and I’m nailed at home&amp;hellip;so I’ve go a lot of free time. Last night I’ve decided to root my Google Nexus S.
I use Ubuntu

12.04 on my home machine so I put on it Oracle Java and Android SDK. I also installed few packages from the SDK (platform-tools). I created few udev rules, because my computer wasn’t able to know what to do when I plug-in my Nexus with a fastboot mode.</description>
    </item>
    
    <item>
      <title>HTML5 image editor</title>
      <link>https://blog.mgechev.com/2012/04/25/html5-image-editor/</link>
      <pubDate>Wed, 25 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/04/25/html5-image-editor/</guid>
      <description>As you see HTML5 is everywhere (of course I exclude IE&amp;hellip;or just before version 10). Web site used for quick image composition or edition is something very useful for the “modern web person”. There are few such services. Most of them use Flash. Nothing against it but&amp;hellip;it’s too heavy for me&amp;hellip;unnecessarily heavy. For all that stuff you can use HTML5 canvas. I also found some HTML5 image editors but their functionality was very limited.</description>
    </item>
    
    <item>
      <title>Курсови проекти – ФМИ</title>
      <link>https://blog.mgechev.com/2012/03/31/%d0%ba%d1%83%d1%80%d1%81%d0%be%d0%b2%d0%b8-%d0%bf%d1%80%d0%be%d0%b5%d0%ba%d1%82%d0%b8-%d1%84%d0%bc%d0%b8/</link>
      <pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/03/31/%d0%ba%d1%83%d1%80%d1%81%d0%be%d0%b2%d0%b8-%d0%bf%d1%80%d0%be%d0%b5%d0%ba%d1%82%d0%b8-%d1%84%d0%bc%d0%b8/</guid>
      <description>Тъй като съм вече студент 3-ти курс във ФМИ и курсовите проекти се натрупаха, мисля че мога да бъда полезен на “младото поколение ФМИ-исти”, като предоставя една страница с връзки към кода, който съм разработил. Това ще можете да намерите в новата секция на блога ми “FMI Projects”.
Надявам се с това да помогна на студентите или да накарам преподавателите да проявят повече въображение в бъдещите задания към студентите :-).</description>
    </item>
    
    <item>
      <title>Carousel Gallery</title>
      <link>https://blog.mgechev.com/2012/02/16/carousel-gallery/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/02/16/carousel-gallery/</guid>
      <description>And one post in English&amp;hellip;For few days I’m developing one jQuery UI plugin. It’s picture gallery which I’ve seen in flash but not in JavaScript, that’s why I decided to fix this. The gallery is a set of rotating pictures and difference ways of handling the perspective. There’s nothing complicated in it just little analytic geometry. I haven’t used any canvases or SVG because I’ve wanted the biggest possible browser compatibility.</description>
    </item>
    
    <item>
      <title>SofiaJS...</title>
      <link>https://blog.mgechev.com/2012/02/16/sofiajs-2/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/02/16/sofiajs-2/</guid>
      <description>В потребителската група SofiaJS последните няколко месеца се случиха доста интересни неща, а на мен все не ми остава време, за да блогна за тях&amp;hellip; След хубавата лекция на Асен Божилов (за Google Chrome Extensions) и дискусията, която проведохме, Асен се включи активно в организацията и покани най-известния лектор, участвал в срещите – Стоян Стефанов. От своя страна Telerik указаха подкрепа, която оценявам, със своята покана лекцията да се проведе в тяхна зала.</description>
    </item>
    
    <item>
      <title>Color animation plugin for jQuery</title>
      <link>https://blog.mgechev.com/2012/01/16/color-animation-plugin-for-jquery/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/01/16/color-animation-plugin-for-jquery/</guid>
      <description>Hi! I haven’t wrote since a long time but there’s so much code and so little time&amp;hellip;It’s bad that the biggest part of the code is not open source but what can we do&amp;hellip;Last few hours I developed a JavaScript plugin for color animation. Of course for few hours I cant make something with great quality so it’s a little bit unstable (I think) but it works and it’s also valid for the JSLint standards.</description>
    </item>
    
    <item>
      <title>SofiaJS</title>
      <link>https://blog.mgechev.com/2011/11/07/sofiajs/</link>
      <pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/11/07/sofiajs/</guid>
      <description>Преди няколко месеца внезапно (както май често става) започнах да мисля за програмиране (как ли така&amp;hellip;) и най-вече за JavaScript. Забелязах как все повече програмисти се насочват към този език, как все повече започва да се използва навсякъде (дори за server-side приложения) и все пак колко слабо е развито community-то в България. Бях взимал участие в .net потребителските групи и забелязах колко интересни дискусии се получават. Също така ми направи впечатление колко е приятно да се събират хора с еднакви интереси, на които работата им доставя истинско удоволствие (както е в моя случай).</description>
    </item>
    
    <item>
      <title>Sound notification in web page</title>
      <link>https://blog.mgechev.com/2011/11/01/cross-browser-sound-notifications/</link>
      <pubDate>Tue, 01 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/11/01/cross-browser-sound-notifications/</guid>
      <description>Few days ago I was creating a system in which it was necessary to implement a sound notification feature. Well it’s not very hard task but of course you have to be careful with the browser compatibility. At first my source was something like that:
playSound: function () { this.config.soundNotify.html(&amp;#39;&amp;lt;embed src=&amp;#34;&amp;#39; + this.config.soundFile + &amp;#39;.wav&amp;#34; hidden=true autostart=true loop=false&amp;gt;&amp;#39;); } Actually in my Linux it was working pretty well (I tried it mainly in Chrome).</description>
    </item>
    
    <item>
      <title>f8...</title>
      <link>https://blog.mgechev.com/2011/09/23/f8-2/</link>
      <pubDate>Fri, 23 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/09/23/f8-2/</guid>
      <description>Тази сутрин пуснах прословутата f8&amp;hellip;Бях с големи очаквания (дори поствах за нея), може би заради слабата ми информираност очаквах нещо като Google I/O (има си Google&amp;hellip;защо не потърсих предварително&amp;hellip;). Streaming-a тръгна и очаквано видях Марк Зукърбърг. Вместо той да говори за нови технологии и с какви средства е създал нещо ново, започна да прави реклама на новите feature-и на Facebook&amp;hellip;Дам трябваше да прочета повече преди да си настроя часовника да звъни толкова рано&amp;hellip;</description>
    </item>
    
    <item>
      <title>f8</title>
      <link>https://blog.mgechev.com/2011/09/22/f8/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/09/22/f8/</guid>
      <description>Ето нещо интересно, което ще можем да следим онлайн утре сутрин:</description>
    </item>
    
    <item>
      <title>Google&#43; API</title>
      <link>https://blog.mgechev.com/2011/09/16/google-api/</link>
      <pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/09/16/google-api/</guid>
      <description>Като всеки любознателен developer и аз се включих към хората, които искат да получат mail от Google при пускането на API за Google+. Вчера (15-ти септември) около 1 часа получих следния mail:
 Getting Started on the Google+ API
Greetings developers,
Thank you for showing your interest in the Google+ platform on our developer interest form. We promised to let you know when we had more details to share. Well, that time has come&amp;hellip;</description>
    </item>
    
    <item>
      <title>Ajax without jQuery for beginners</title>
      <link>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</link>
      <pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</guid>
      <description>Before years I was writing all the code by my own, without additional libraries (including jQuery). For beginner developer it’s a good strategy. When you use $.ajax it’s all that easy:
$.ajax({ url: &amp;#34;any/url/for/the/request&amp;#34;, type: &amp;#34;get&amp;#34;, success: function(data){ alert(data); } }); But you can’t get the main idea.
Many developers don’t have an idea how to write this without a library. In their opinion AJAX without library a hard, near impossible task.</description>
    </item>
    
    <item>
      <title>Blogger image resize</title>
      <link>https://blog.mgechev.com/2011/07/17/blogger-image-resize/</link>
      <pubDate>Sun, 17 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/17/blogger-image-resize/</guid>
      <description>That’s my second post here and the first one which is going to have any sense. Today a friend of mine was fighting with Google’s blog system&amp;hellip;He was posting some data with images in it. When he was setting width and height of images in the html editor they were being resized later after he post the article. When he tried to put any CSS restriction about picture’s width the effect was – picture flattened (because blogger was setting the picture height).</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://blog.mgechev.com/2011/07/14/hello-world/</link>
      <pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/14/hello-world/</guid>
      <description>Hey,
That’s my first blog here. I’ll try to put some interesting stuff about the Life, Universe and Everything else but mostly I think&amp;hellip;about some technical topics.
I hope that you’re going to find interesting and useful information.
Have a nice read :).
See ya!</description>
    </item>
    
  </channel>
</rss>
