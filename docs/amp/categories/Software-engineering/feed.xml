<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software engineering on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Software-engineering/</link>
    <description>Recent content in Software engineering on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.mgechev.com/categories/Software-engineering/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Patterns in Open Source Projects - Part II</title>
      <link>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</guid>
      <description>This blog post introduces another design pattern into the context of ngrev. If you&amp;rsquo;re not yet familiar with the project, I&amp;rsquo;d strongly recommend reading the introduction and &amp;ldquo;Project Overview&amp;rdquo; sections in the first part of the series.
If you did not take the time, ngrev is an Electron app that visualizes the structure of an Angular app, showing the relationships between components, modules, and providers. The UI retrieves the data for each view using an instance of a state object.</description>
    </item>
    
    <item>
      <title>Design Patterns in Open Source Projects - Part I</title>
      <link>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</guid>
      <description>I see two common frustrations around design patterns: 1. It&amp;rsquo;s easy to memorize patterns but hard to figure out where and how to use them 2. OOP is lame, and design patterns suck
If the second bullet point resonates with you, this blog post is probably not a good use of your time.
Now let&amp;rsquo;s focus on the first point. It&amp;rsquo;s not easy to understand design patterns just by reading the gang of four book or dummy examples on Wikipedia.</description>
    </item>
    
  </channel>
</rss>