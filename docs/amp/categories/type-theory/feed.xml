<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type theory on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Type-theory/</link>
    <description>Recent content in Type theory on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.mgechev.com/categories/Type-theory/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Developing Statically Typed Programming Language</title>
      <link>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</guid>
      <description>In this blog post we&amp;rsquo;ll go through a sample implementation of a type checker, interpreter and a transpiler for a basic purely functional programming language, which is based on the lambda calculus. We will do a &amp;ldquo;full-stack&amp;rdquo; programming language development by going through formal definition of the language&amp;rsquo;s syntax, semantics and type system. After that we&amp;rsquo;ll demonstrate how we can &amp;ldquo;translate&amp;rdquo; these definitions to JavaScript.
Although the article doesn&amp;rsquo;t require any mathematical background, it&amp;rsquo;ll be useful to have high-level understanding of how compilers work.</description>
    </item>
    
  </channel>
</rss>