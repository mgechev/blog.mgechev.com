<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Http/</link>
    <description>Recent content in Http on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/categories/Http/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Express over HTTPS</title>
      <link>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</guid>
      <description>Sometimes you want to test your application in environment closer to the real world. In such cases you might need to run it over TLS.
Here are two simple steps, which can be used to achieve this result:
Generate self-signed certificate If you don’t already have certificate you need to generate one:
$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 You will be asked a couple of questions&amp;hellip; In this case we generated a self-signed certificate for 365 days.</description>
    </item>
    
    <item>
      <title>The magic of $resource (or simply a client-side Active Record)</title>
      <link>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</guid>
      <description>At first sight AngularJS seems like a magical framework, which does some weird but awesome things like dependency injection, data binding only by setting a single property to the magical object named $scope and many other things.
If you look at the source code of Angular you’ll see a lot of smart and simple solutions for these magical problems. In this blog post I’ll describe the magic which stays behind $resource.</description>
    </item>
    
    <item>
      <title>plainvm</title>
      <link>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvm can take the virtualization into different level of usage. To prove this I’ll first ask few rhetorical questions and put their answers&amp;hellip;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;hellip;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) – the browser.</description>
    </item>
    
    <item>
      <title>Caching CSS with localStorage</title>
      <link>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</link>
      <pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</guid>
      <description>Since HTML5 became wide supported the most popular aspects I hear about were it’s canvas, WebSockets and localStorage. I’ve got very close experience with the first two of the mentioned but the localStorage was somehow unknown for me since a month. I’ve researched the topic. Actually it’s quite interesting and useful as you might guess. Using localStorage you can save different kinds of data locally into key-value pairs. The data lives on your local machine until it’s deleted (cleared).</description>
    </item>
    
    <item>
      <title>Ajax without jQuery for beginners</title>
      <link>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</link>
      <pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</guid>
      <description>Before years I was writing all the code by my own, without additional libraries (including jQuery). For beginner developer it’s a good strategy. When you use $.ajax it’s all that easy:
$.ajax({ url: &amp;#34;any/url/for/the/request&amp;#34;, type: &amp;#34;get&amp;#34;, success: function(data){ alert(data); } }); But you can’t get the main idea.
Many developers don’t have an idea how to write this without a library. In their opinion AJAX without library a hard, near impossible task.</description>
    </item>
    
  </channel>
</rss>
