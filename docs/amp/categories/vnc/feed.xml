<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VNC on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/VNC/</link>
    <description>Recent content in VNC on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Feb 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/categories/VNC/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Remote Desktop Client with AngularJS and Yeoman</title>
      <link>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</guid>
      <description>In this blog post I’m going to show you how to build a VNC client using AngularJS and Yeoman. The source code used in the post is available at my GitHub. Click here to see the final result.

It seems I have affinity to the remote desktop protocols, because this is my third project at GitHub, which implements one (VNC client on 200 lines of JavaScript, VNC client for Chrome DevTools and VNC client with AngularJS).</description>
    </item>
    
    <item>
      <title>VNC client on 200 lines of JavaScript</title>
      <link>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</guid>
      <description>In this quick blog post I’ll show you how to create a simple VNC client in about 200 lines of JavaScript. For our goal we’re going to use only HTML5 and JavaScript (client and server side). The end result will be something like this:

So, let’s begin!
Our application will have very simple architecture – a proxy server written in Node.js and a client in HTML5 and JavaScript. The Node.</description>
    </item>
    
    <item>
      <title>plainvm</title>
      <link>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvmcan take the virtualization into different level of usage. To prove this I’ll first ask few rhetorical questions and put their answers&amp;hellip;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;hellip;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) – the browser.</description>
    </item>
    
    <item>
      <title>Debian Squeeze &#43; LXDE on Google Nexus S (or having some fun while suffering)</title>
      <link>https://blog.mgechev.com/2012/07/08/debian-squeeze-lxde-on-google-nexus-s-or-having-some-fun-while-suffering/</link>
      <pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/07/08/debian-squeeze-lxde-on-google-nexus-s-or-having-some-fun-while-suffering/</guid>
      <description>I’m here again, after a long pause. For a while I’ve got problems with my health and I’m nailed at home&amp;hellip;so I’ve go a lot of free time. Last night I’ve decided to root my Google Nexus S.
I use Ubuntu

12.04 on my home machine so I put on it Oracle Java and Android SDK. I also installed few packages from the SDK (platform-tools). I created few udev rules, because my computer wasn’t able to know what to do when I plug-in my Nexus with a fastboot mode.</description>
    </item>
    
  </channel>
</rss>
