<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Data on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Binary-Data/</link>
    <description>Recent content in Binary Data on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/tags/Binary-Data/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processing Binary Protocols with Client-Side JavaScript</title>
      <link>https://blog.mgechev.com/2015/02/06/parsing-binary-protocol-data-javascript-typedarrays-blobs/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2015/02/06/parsing-binary-protocol-data-javascript-typedarrays-blobs/</guid>
      <description>Last couple of weeks I&amp;rsquo;m trying to build high-performance consumption of binary protocol through the browser. The protocol is running over TCP. In the perfect world I&amp;rsquo;d be talking with the remote TCP server, through TCP sockets, connecting directly from the client-side JavaScript and consuming the received binary data.&#xA;Because of limitations of the client-side API, JavaScript doesn&amp;rsquo;t has access to plain TCP sockets, there&amp;rsquo;s no full happiness. The second best option would be to use intermediate proxy, which:</description>
    </item>
  </channel>
</rss>
