<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree-shaking on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/tree-shaking/</link>
    <description>Recent content in tree-shaking on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jul 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/tags/tree-shaking/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.5X Smaller Angular 2 Applications with Google Closure Compiler</title>
      <link>https://blog.mgechev.com/2016/07/21/even-smaller-angular2-applications-closure-tree-shaking/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2016/07/21/even-smaller-angular2-applications-closure-tree-shaking/</guid>
      <description>In the post &amp;ldquo;Building an Angular 2 Application for Production&amp;rdquo; we explored how we can decrease the bundle size of a &amp;ldquo;Hello world!&amp;rdquo; application to from about 1.6M (non-minified &amp;amp; uncompressed) to 49K! We did this by using the following techniques:&#xA;Angular offline template compiler for generating tree-shakable code. Tree-shaking of ES2015 modules with rollup. Bundling of the application. Minification with uglifyjs. Compression with gzip. Although we achieved impressive results we can do even better!</description>
    </item>
    <item>
      <title>Building an Angular Application for Production</title>
      <link>https://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/</guid>
      <description>Progressive Web Applications help us build native-like web apps, thanks to amazing tools such as Service Workers, IndexDB, App Shell etc. Once the browser downloads all the static assets required by our app, the active Service Worker can cache them locally.&#xA;This way the user may experience slowdown during the initial page load, but each next time she opens the application her experience will be instant!&#xA;In order to help developers take advantage of the technologies behind the PWA as easy as possible, the Angular team is working on the Angular mobile-toolkit.</description>
    </item>
  </channel>
</rss>
