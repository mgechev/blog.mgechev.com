<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Angular/</link>
    <description>Recent content in Angular on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.mgechev.com/tags/Angular/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5 Angular CLI Features You Didn&#39;t Know About</title>
      <link>https://blog.mgechev.com/2019/02/06/5-angular-cli-features/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2019/02/06/5-angular-cli-features/</guid>
      <description>I&amp;rsquo;ve been using Angular for years, not only the framework itself but the entire development platform, including the CLI. Since I joined the Angular team and started digging into the source code, however, I started noticing features in the CLI that I&amp;rsquo;ve never used before. In this blog post I want to share some of them, which will make your work life easier and more productive!
Conditional Polyfill Serving In the development of Angular we&amp;rsquo;re using TypeScript with a lot of modern JavaScript features.</description>
    </item>
    
    <item>
      <title>Angular quicklink Preloading Strategy</title>
      <link>https://blog.mgechev.com/2018/12/24/quicklink-angular-prefetching-preloading-strategy/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/12/24/quicklink-angular-prefetching-preloading-strategy/</guid>
      <description>A few months ago I posted an article about Guess.js. Guess.js is a powerful library for predictive prefetching of JavaScript based on analytics data for a website. The library consumes reports from an analytics source (by default Google Analytics) and builds a basic machine learning model. When a user visits the site, based on the model Guess.js prefetches resources which are likely to be needed next. Thanks to the data-driven approach, Guess.</description>
    </item>
    
    <item>
      <title>Introducing Bazel Schematics for Angular CLI</title>
      <link>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</guid>
      <description>In this blog post, we want to share our new schematics for Angular CLI which provide Bazel build support. You can find the implementation by Keen Liau on GitHub. With the @angular/bazel package, we want to let developers use Angular CLI with Bazel as a build tool.
What&amp;rsquo;s Bazel? Google open sourced the software responsible for building most of our projects under the name Bazel. Bazel is a powerful tool which can keep track of the dependencies between different packages and build targets.</description>
    </item>
    
    <item>
      <title>Introducing Guess.js - a toolkit for enabling data-driven user-experiences on the Web</title>
      <link>https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/</guid>
      <description>About two months ago I published my initial research[1] on data-driven bundling. A few weeks after that, I had the opportunity to present my work on RenderConf in Oxford, UK in my talk &amp;ldquo;Teach Your Bundler Users&amp;rsquo; Habits&amp;rdquo;[2].
The original goal of the article was to show how data can help in improving the user-perceived page load performance by using predictive analytics[3]. The artifacts from the article were executable node modules which can be used for predictive pre-fetching &amp;amp; data-driven clustering of JavaScript chunks.</description>
    </item>
    
    <item>
      <title>Machine Learning-Driven Bundling. The Future of JavaScript Tooling.</title>
      <link>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</guid>
      <description>In this article, I&amp;rsquo;ll introduce the early implementation of a few tools which based on techniques from the machine learning allow us to perform data-driven chunk clustering and pre-fetching for single-page applications. The purpose is to provide a zero-configuration mechanism which based on data from Google Analytics for the users&amp;rsquo; behavior performs the most optimal build. We&amp;rsquo;re also going to introduce a webpack plugin which works with Angular CLI and Create React App.</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Understanding Differs. Developing a Custom IterableDiffer</title>
      <link>https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/</guid>
      <description>In this article we&amp;rsquo;ll take a look at another Angular abstraction - the differs and more specifically the IterableDiffer; we&amp;rsquo;ll explain what the differs are and how the framework uses them internally. After that, we&amp;rsquo;ll take a look at how NgForOf works and design a custom data structure optimized for the directive. Finally, we&amp;rsquo;ll develop a custom differ which will speed up the change detection mechanism of Angular when working with large collections.</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Part 2. Pure Pipes, Pure Functions and Memoization</title>
      <link>https://blog.mgechev.com/2017/11/12/faster-angular-applications-pure-pipes-memoization-pure-functions-part-2/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/12/faster-angular-applications-pure-pipes-memoization-pure-functions-part-2/</guid>
      <description>In this post, we&amp;rsquo;ll focus on techniques from functional programming we can apply to improve the performance of our applications, more specifically pure pipes, memoization, and referential transparency. If you haven&amp;rsquo;t read the first part of the &amp;ldquo;Faster Angular Applications&amp;rdquo; series, I&amp;rsquo;d recommend you to take a look at it or at least get familiar with the structure of the business application that we&amp;rsquo;re optimizing.
The code for this blog post is available at my GitHub account:</description>
    </item>
    
    <item>
      <title>Faster Angular Applications - Part 1. On Push Change Detection and Immutability</title>
      <link>https://blog.mgechev.com/2017/11/11/faster-angular-applications-onpush-change-detection-immutable-part-1/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/11/11/faster-angular-applications-onpush-change-detection-immutable-part-1/</guid>
      <description>On AngularConnect 2017 in London, I gave a talk called &amp;ldquo;Purely Fast.&amp;rdquo; In the presentation, I showed how step by step we can improve the performance of a business application. In the example, I incorporated as many performance issues as possible which I faced over the past a couple of years developing enterprise Angular and AngularJS applications. After the presentation, I got great feedback for the content, so I decided to write a series of blog posts which aim to explain the content from &amp;ldquo;Purely Fast&amp;rdquo; in details.</description>
    </item>
    
    <item>
      <title>Understanding Dynamic Scoping and TemplateRef</title>
      <link>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</guid>
      <description>This post will be dedicated to template references in Angular and dynamic scoping. Although the main focus of the article will be understanding TemplateRef we will also touch semantics of programming languages by introducing the concept of scope of name binding.
The code samples for this article can be found in my GitHub account.
Introducing Template References In order to understand TemplateRef lets take a look at the NgForOf directive.</description>
    </item>
    
    <item>
      <title>7 Angular Tools That You Should Consider</title>
      <link>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</guid>
      <description>In this article we&amp;rsquo;re going to quickly explore 7 Angular development tools which can make our everyday life easier. The purpose of the list is to not be opinionated architecture wise. This means that we&amp;rsquo;re not going to discuss tooling which has impact over our choice of application state management, data layer, etc. For instance, although packages like ngrx/store devtools, universal, and others are amazing once we&amp;rsquo;ve chosen a specific architectural approach, we&amp;rsquo;re going to keep them out of this article because they assume we&amp;rsquo;re using a specific way of state management or application rendering.</description>
    </item>
    
    <item>
      <title>Announcing ngrev - Reverse Engineering Tool for Angular</title>
      <link>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</guid>
      <description>Have you ever been hired to work on a huge legacy Angular project with thousands of NgModules, components, directives, pipes and services? Neither do I. Angular (2 and above) is still relatively new framework and there are not many enormous projects out there. On the other hand, Angular is powerful and in combination with TypeScript we can build big, enterprise applications.
Exploring an Application It&amp;rsquo;s hard to start digging into a large codebase without being aware of the overall structure of the project.</description>
    </item>
    
    <item>
      <title>Implementing Angular&#39;s Dependency Injection in React. Understanding Element Injectors.</title>
      <link>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</guid>
      <description>Recently I&amp;rsquo;ve been blogging mostly about Angular and it&amp;rsquo;s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I&amp;rsquo;m working on have various of different requirements and sometimes I need to consider different options.
Another great technology that I&amp;rsquo;ve used in the past is React. I don&amp;rsquo;t want to compare it with Angular; I&amp;rsquo;m sure there are variety of cases when one of them fits better compared to the other and visa versa.</description>
    </item>
    
    <item>
      <title>Distributing an Angular Library - The Brief Guide</title>
      <link>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</guid>
      <description>In this post I&amp;rsquo;ll quickly explain the minimum you need to know in order to publish an Angular component to npm. By the end of the post you&amp;rsquo;ll know how your module can:
 Be platform independent (i.e. run in Web Workers, Universal). Should be bundled and distributed. Work with the Angular&amp;rsquo;s Ahead-of-Time compiler. Play well with TypeScript by allowing autocompletion and compile-time type checking.  If you&amp;rsquo;re only interested in a quick checklist of things you need to consider for distributing your Angular library, go directly to the &amp;ldquo;Distributing an Angular Library - Checklist&amp;rdquo; section.</description>
    </item>
    
    <item>
      <title>Angular in Production</title>
      <link>https://blog.mgechev.com/2017/01/17/angular-in-production/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/17/angular-in-production/</guid>
      <description>In this informal essay I&amp;rsquo;ll go through a case study of my experience in using Angular (2 and above) in production.
Last April, together with a small team, we started working on an educational application; the second version of a product that I developed about 3 years ago using Angular 1.
The product targets young kids and their parents. It&amp;rsquo;s purpose is to motivate kids to learn maths by earning rewards.</description>
    </item>
    
    <item>
      <title>Ahead-of-Time Compilation in Angular</title>
      <link>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</guid>
      <description>Recently I added Ahead-of-Time (AoT) compilation support to angular-seed and got a lot of questions about the new feature. In order to answer most of them, we will start from the beginning by explaining the following topics:
 Why we need compilation in Angular? What needs to be compiled? How it gets compiled? When the compilation takes place? Just-in-Time (JiT) vs Ahead-of-Time (AoT). What we get from AoT? How the AoT compilation works?</description>
    </item>
    
    <item>
      <title>Using Stripe with Angular (Deprecated)</title>
      <link>https://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</guid>
      <description>The content in this post uses deprecated APIs To learn about the latest version of the Stripe APIs check out their documentation page.  #post-body { color: #bbb; } .deprecation-notice { color: black; }  Stripe offer a set of APIs which allow businesses and individuals to easily accept and manage payments online. In a typical scenario you want your users to pay for a service that you&amp;rsquo;re offering using Stripe as a mediator.</description>
    </item>
    
    <item>
      <title>ViewChildren and ContentChildren in Angular</title>
      <link>https://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</guid>
      <description>In this article I&amp;rsquo;m going to explain the difference between the concepts of view children and content children in Angular. We will take a look at how we can pass access these two different kinds of children from their parent component. Along the content we are also going to mention what the difference between the properties providers and viewProviders of the @Component decorator is.
You can find the source code of the current article at my GitHub account.</description>
    </item>
    
    <item>
      <title>What I get from the JavaScript MV* frameworks</title>
      <link>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</guid>
      <description>Why should I use JavaScript MVC, MVVM, MVP or simply MVW(hatever works for you)?
When I talk with people, who are beginners/intermediate in JavaScript I’m often asked this question. They are usually people who, until now, have used JavaScript only for making their website “fancier” – adding client-side form validation, creating carousel, checking whether a user already exists with simple Ajax request. When you start building something bigger (+10k lines of JavaScript) I truly believe that there are a few benefits from using such micro-architectural frameworks.</description>
    </item>
    
  </channel>
</rss>