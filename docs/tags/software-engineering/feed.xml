<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software engineering on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Software-engineering/</link>
    <description>Recent content in Software engineering on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/Software-engineering/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design Patterns in Open Source Projects - Part II</title>
      <link>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/24/design-pattens-in-open-source-projects-part-ii/</guid>
      <description>This blog post introduces another design pattern into the context of ngrev. If you&amp;rsquo;re not yet familiar with the project, I&amp;rsquo;d strongly recommend taking 2 minutes to the introduction and &amp;ldquo;Project Overview&amp;rdquo; sections in the first part of the series.
If you did not take the time, ngrev is an Electron app that visualizes the structure of an Angular app, showing the relationships between components, modules, and providers. The UI retrieves the data for each view using an instance of a state object.</description>
    </item>
    
    <item>
      <title>Design Patterns in Open Source Projects - Part I</title>
      <link>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2021/01/18/design-pattens-in-open-source-projects-part-i/</guid>
      <description>I see two common frustrations around design patterns:
 It&amp;rsquo;s easy to memorize patterns but hard to figure out where and how to use them OOP is lame, and design patterns suck  If the second bullet point resonates with you, this blog post is probably not a good use of your time.
Now let&amp;rsquo;s focus on the first point. It&amp;rsquo;s not easy to understand design patterns just by reading the gang of four book or dummy examples on Wikipedia.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 3)</title>
      <link>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</guid>
      <description>Link to the first part of the series. Link to the second part of the series.
This is the last blog post of the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you want to be aware of my up-coming work, you can follow me at github.com/mgechev.
Directives Composite  The composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects are to be treated in the same way as a single instance of an object.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 2). Services.</title>
      <link>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</guid>
      <description>Link to the first part of the series.
This blog post continues the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you like my work you can follow me at github.com/mgechev.
Services In this sub-chapter we are going to take a look at the design and architectural patterns used in AngularJS&#39; services.
Note: Some of the described patterns are used in other components as well but their usage is almost equivalent so they are explained here.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 1). Overview of AngularJS</title>
      <link>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</guid>
      <description>In this series of blog posts I’m going to cover the paper I’m writing at GitHub.
It aims to provide a bit more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.
Part one includes only a high level overview of AngularJS, enjoy it.
AngularJS overview AngularJS is JavaScript framework developed by Google.</description>
    </item>
    
  </channel>
</rss>
