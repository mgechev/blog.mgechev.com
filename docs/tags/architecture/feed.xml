<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Architecture/</link>
    <description>Recent content in Architecture on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.mgechev.com/tags/Architecture/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux Anti-Patterns - Part 1. State Management.</title>
      <link>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</guid>
      <description>For the past year I&amp;rsquo;ve been working on a project which uses React with TypeScript and Redux. In a few blog posts I&amp;rsquo;m planning to share lessons learned while combining these technologies. In this article I&amp;rsquo;ll share a few anti-patterns related to state management that I noticed in our development process. In the second article I&amp;rsquo;ll focus on testability.
All of the anti-patterns below have the following structure:
 Introduction Problem definition Sample solutions with discussion of their pros and cons  State Duplication Sometimes we have instances of the same business entity used in different contexts.</description>
    </item>
    
  </channel>
</rss>