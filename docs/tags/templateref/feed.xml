<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TemplateRef on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/TemplateRef/</link>
    <description>Recent content in TemplateRef on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/TemplateRef/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Dynamic Scoping and TemplateRef</title>
      <link>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/10/01/angular-template-ref-dynamic-scoping-custom-templates/</guid>
      <description>This post will be dedicated to template references in Angular and dynamic scoping. Although the main focus of the article will be understanding TemplateRef we will also touch semantics of programming languages by introducing the concept of scope of name binding.
The code samples for this article can be found in my GitHub account.
Introducing Template References In order to understand TemplateRef lets take a look at the NgForOf directive. Suppose we have a list of puppies and we want to iterate over it in the PuppyListComponent.</description>
    </item>
    
  </channel>
</rss>
