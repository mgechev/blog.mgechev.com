<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTML5 on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/HTML5/</link>
    <description>Recent content in HTML5 on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/tags/HTML5/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stream your Desktop to HTML5 Video Element</title>
      <link>https://blog.mgechev.com/2014/12/31/stream-desktop-html5-video-vlc/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/12/31/stream-desktop-html5-video-vlc/</guid>
      <description>In this blog post I&amp;rsquo;ll share how you can stream your desktop to HTML5 video element.&#xA;All you need is VLC video player and web browser, which supports HTML5.&#xA;How to&amp;hellip; Open VLC and select &amp;ldquo;Open Capture Device&amp;rdquo;:&#xA;As next step chose &amp;ldquo;Capture&amp;rdquo; and from the drop down below select &amp;ldquo;Screen&amp;rdquo;. Adjust the frame rate and mark the checkbox &amp;ldquo;Streaming/Saving:&amp;rdquo;&#xA;Click settings and select that you want to &amp;ldquo;Stream&amp;rdquo; the video (from the radio buttons), after that for stream type select &amp;ldquo;HTTP&amp;rdquo; and for &amp;ldquo;Encapsulation Method&amp;rdquo; &amp;ldquo;OGG&amp;rdquo;.</description>
    </item>
    <item>
      <title>Remote Desktop Client with AngularJS and Yeoman</title>
      <link>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/08/remote-desktop-vnc-client-with-angularjs-and-yeoman/</guid>
      <description>In this blog post I’m going to show you how to build a VNC client using AngularJS and Yeoman. The source code used in the post is available at my GitHub. Click here to see the final result.&#xA;It seems I have affinity to the remote desktop protocols, because this is my third project at GitHub, which implements one (VNC client on 200 lines of JavaScript, VNC client for Chrome DevTools and VNC client with AngularJS).</description>
    </item>
    <item>
      <title>Advanced JavaScript at Sofia University</title>
      <link>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</guid>
      <description>In this blog post I’ll tell few words about the course Advanced JavaScript which Georgi Penkov, Evgeni Kunev and me are leading this semester in Sofia University.&#xA;I was included as a lecturer in it after my project for Practical Programming with Perl (plainvm) which is created by Georgi Penkov. The idea behind the course is not to concentrate on the syntax of JavaScript but to introduce to the students different modern technologies.</description>
    </item>
    <item>
      <title>VNC client on 200 lines of JavaScript</title>
      <link>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</guid>
      <description>In this quick blog post I’ll show you how to create a simple VNC client in about 200 lines of JavaScript. For our goal we’re going to use only HTML5 and JavaScript (client and server side). The end result will be something like this:&#xA;So, let’s begin!&#xA;Our application will have very simple architecture – a proxy server written in Node.js and a client in HTML5 and JavaScript. The Node.js server will stay between the browser and the VNC server.</description>
    </item>
    <item>
      <title>CSS3 flipping effect</title>
      <link>https://blog.mgechev.com/2013/05/04/css3-flipping-effect/</link>
      <pubDate>Sat, 04 May 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/05/04/css3-flipping-effect/</guid>
      <description>As you know because of the SIMD nature of the GPU it’s extremely good for graphical calculations. Since HTML5 and CSS3 are here we have a couple of ways for efficient and smooth animations one of them are the CSS3 transitions.&#xA;Before few days I needed a CSS3 flipping effect which should works at least in IE10, Chrome 25+ and Firefox. I tried different demos which I found in the web but there were couple of issues with them.</description>
    </item>
    <item>
      <title>plainvm</title>
      <link>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvm can take the virtualization into different level of usage. To prove this I’ll first ask few rhetorical questions and put their answers&amp;hellip;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;hellip;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) – the browser.</description>
    </item>
    <item>
      <title>JavaScript image scaling</title>
      <link>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</link>
      <pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</guid>
      <description>I haven’t wrote here for a while so I decided to write about something more practical. Actually the idea for the post come from one my response in stackoverflow. The post is connected with pure client side image scaling. While you’re reading the example I hope that you’ll see how powerful is the HTML5 API and how with few lines of code you can do something which in other technologies is much more complex.</description>
    </item>
    <item>
      <title>Caching CSS with localStorage</title>
      <link>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</link>
      <pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2012/09/04/caching-css-in-the-localstorage/</guid>
      <description>Since HTML5 became wide supported the most popular aspects I hear about were it’s canvas, WebSockets and localStorage. I’ve got very close experience with the first two of the mentioned but the localStorage was somehow unknown for me since a month. I’ve researched the topic. Actually it’s quite interesting and useful as you might guess. Using localStorage you can save different kinds of data locally into key-value pairs. The data lives on your local machine until it’s deleted (cleared).</description>
    </item>
    <item>
      <title>HTML5 image editor</title>
      <link>https://blog.mgechev.com/2012/04/25/html5-image-editor/</link>
      <pubDate>Wed, 25 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2012/04/25/html5-image-editor/</guid>
      <description>As you see HTML5 is everywhere (of course I exclude IE&amp;hellip;or just before version 10). Web site used for quick image composition or edition is something very useful for the “modern web person”. There are few such services. Most of them use Flash. Nothing against it but&amp;hellip;it’s too heavy for me&amp;hellip;unnecessarily heavy. For all that stuff you can use HTML5 canvas. I also found some HTML5 image editors but their functionality was very limited.</description>
    </item>
  </channel>
</rss>
