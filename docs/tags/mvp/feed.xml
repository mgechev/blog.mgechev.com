<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MVP on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/MVP/</link>
    <description>Recent content in MVP on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Apr 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/tags/MVP/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why I should use publish/subscribe in JavaScript</title>
      <link>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</guid>
      <description>This post is inspired by my answer at StackOverflow.&#xA;So why we should use publish/subscribe? Why it is useful? Is it making our work harder or it makes our application better?&#xA;And the answer&amp;hellip;&#xA;It’s all about loose coupling and single responsibility, which goes hand to hand with MV* (MVC/MVP/MVVM) patterns in JavaScript which are very modern in the last few years.&#xA;Loose coupling is an Object-oriented principle in which each component of the system knows it’s responsibility and don’t care about the other components (or at least tries to not care about them as much as possible).</description>
    </item>
  </channel>
</rss>
