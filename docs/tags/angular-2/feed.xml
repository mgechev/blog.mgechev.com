<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular 2 on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Angular-2/</link>
    <description>Recent content in Angular 2 on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/Angular-2/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing the Missing &#34;resolve&#34; Feature of the Angular 2 Router</title>
      <link>https://blog.mgechev.com/2016/05/21/angular2-router-implementing-missing-resolve-feature-deprecated-defer/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/05/21/angular2-router-implementing-missing-resolve-feature-deprecated-defer/</guid>
      <description>For the last a couple of months I&amp;rsquo;m working on an Angular 2 based PWA. The more complex the application gets, the more I appreciate that our choice was Angular! For routing we&amp;rsquo;re using the initial Angular 2 router that is now deprecated. For sure we will migrate to the newest one once it gets stable but until then we have some problems to solve.
One of the features that I miss most in both the new and the newest Angular 2 routes is the resolve functionality which the AngularJS 1.</description>
    </item>
    
    <item>
      <title>Scalable Single-Page Application Architecture</title>
      <link>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</guid>
      <description>In order to have better understanding of the following blog post you should be familiar with the fundamentals of the object-oriented and functional programming. I also strongly encourage you to explore the redux pattern.
A couple of months ago I started working on the first version of a Silicon Valley-based startup. The project is a single-page application with quite dynamic business requirements. As in most modern single-page applications we have a fat client which encapsulates decent amount of business logic and state.</description>
    </item>
    
    <item>
      <title>Static Code Analysis of Angular 2 and TypeScript Projects</title>
      <link>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</guid>
      <description>So far, most of the blog posts I&amp;rsquo;ve written are tutorials; they explain how we can use given technologies, architectures, algorithm etc. For instance:
 Flux in Depth. Store and Network Communication. ViewChildren and ContentChildren in Angular 2 Build Your own Simplified AngularJS in 200 Lines of JavaScript Remote Desktop Client with AngularJS and Yeoman  The code for the current research could be found here and here.
The current post is about an exciting project I am working on in my spare time.</description>
    </item>
    
    <item>
      <title>Enforcing Best Practices with Static Code Analysis of Angular 2 Projects</title>
      <link>https://blog.mgechev.com/2016/02/18/angular2-style-guide-best-practices-lint-tslint/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/02/18/angular2-style-guide-best-practices-lint-tslint/</guid>
      <description>About two weeks ago I published the initial draft of a Community-driven Angular 2 Style Guide. It was based on:
 Patterns I noticed in the Angular 2 source code while contributing to the framework. Suggestions by Mi≈°ko Hevery during his technical review of my book &amp;ldquo;Switching to Angular 2&amp;rdquo;. My own development experience with Angular 2. AngularJS 1.x common practices which could be applied to Angular 2 applications keeping the transition process smoother.</description>
    </item>
    
    <item>
      <title>Dynamically Configuring the Angular&#39;s Router</title>
      <link>https://blog.mgechev.com/2015/12/30/angular2-router-dynamic-route-config-definition-creation/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/12/30/angular2-router-dynamic-route-config-definition-creation/</guid>
      <description>Warning: This version of the Angular 2 router is now deprecated! This means that soon the used below APIs will no longer be available.  A couple of months ago I wrote &amp;ldquo;Lazy Loading of Route Components in Angular 2&amp;rdquo;, where I explained how we can take advantage of the AsyncRoutes and the virtual proxy pattern in Angular 2.
This way we can incrementally load the entire application by only requesting the resources required for the individual views.</description>
    </item>
    
    <item>
      <title>Angular 2 Hot Loader</title>
      <link>https://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</guid>
      <description>A couple of months ago I watched a few talks from ReactEurope. I was truly impressed by a few of them and especially by the one by Dan Abramov on redux and his hot loader. The tool he shown helps you do something similar to live-reload with one big difference. When you change the code of any of the components in your react application, the new version of the component is send to the application itself where all its instances are patched so the changes you did to be visible.</description>
    </item>
    
    <item>
      <title>Lazy Loading of Route Components in Angular 2</title>
      <link>https://blog.mgechev.com/2015/09/30/lazy-loading-components-routes-services-router-angular-2/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/09/30/lazy-loading-components-routes-services-router-angular-2/</guid>
      <description>Warning: This version of the Angular 2 router is now deprecated! This means that soon the used below APIs will no longer be available.  For the examples in the content below I&amp;rsquo;ve used the angular2-seed project. The code for the article could be found at my GitHub account.
This blog post is mostly about performance and more accurately - lazy loading. Before we get started lets make a quick recap of what problem we&amp;rsquo;re about to solve.</description>
    </item>
    
  </channel>
</rss>
