<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CNN on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/CNN/</link>
    <description>Recent content in CNN on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/CNN/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing Mortal Kombat with TensorFlow.js. Transfer learning and data augmentation</title>
      <link>https://blog.mgechev.com/2018/10/20/transfer-learning-tensorflow-js-data-augmentation-mobile-net/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/10/20/transfer-learning-tensorflow-js-data-augmentation-mobile-net/</guid>
      <description>While experimenting with enhancements of the prediction model of Guess.js, I started looking at deep learning. I&amp;rsquo;ve focused mainly on recurrent neural networks (RNNs), specifically LSTM because of their &amp;ldquo;unreasonable effectiveness&amp;rdquo; in the domain of Guess.js. In the same time, I started playing with convolutional neural networks (CNNs), which although less traditionally, are also often used for time series. CNNs are usually used for image classification, recognition, and detection.
After playing around with CNNs, I remembered an experiment I did a few years ago, when the browser vendors introduced the getUserMedia API.</description>
    </item>
    
  </channel>
</rss>
