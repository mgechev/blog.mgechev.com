<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming languages on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/programming-languages/</link>
    <description>Recent content in programming languages on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/programming-languages/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Developing Statically Typed Programming Language</title>
      <link>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</guid>
      <description>In this blog post we&amp;rsquo;ll go through a sample implementation of a type checker, interpreter and a transpiler for a basic purely functional programming language, which is based on the lambda calculus. We will do a &amp;ldquo;full-stack&amp;rdquo; programming language development by going through formal definition of the language&amp;rsquo;s syntax, semantics and type system. After that we&amp;rsquo;ll demonstrate how we can &amp;ldquo;translate&amp;rdquo; these definitions to JavaScript.
Although the article doesn&amp;rsquo;t require any mathematical background, it&amp;rsquo;ll be useful to have high-level understanding of how compilers work.</description>
    </item>
    
    <item>
      <title>AngularJS style guide</title>
      <link>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</guid>
      <description>Today I created a GitHub repositorywhich contains a set of good practices and style guides for AngularJS application development.
Its main goal is to be community-driven and to concentrate all the best practices for AngularJS development in one place.
I’ve collected these guidelines mostly from my own experience and the source code of AngularJS. I guess there are missing things thats why I’ll try to fill the gaps in future. Also, if you find something which can be improved or included feel free to contribute.</description>
    </item>
    
    <item>
      <title>Aspect-Oriented Programming with AngularJS</title>
      <link>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</guid>
      <description>In the following blog post I’ll write few words about what is Aspect-Oriented Programming, why I think it will be useful in AngularJS and I’m also going to give you a short tutorial for using a simple AOP framework I’ve developed.
First things first. What is AOP? As we all know OOP is awesome! It gives us many tools for making our development process simpler. Its core principles are Abstraction, Encapsulation, Inheritance and Polymorphism.</description>
    </item>
    
    <item>
      <title>ELang</title>
      <link>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</guid>
      <description>And one more blog post by me! It’s going to be in brand new topic than the others. For about an year and a half I’ve got an idea which I wanted to accomplish&amp;hellip;To create my own simple programming language. Actually it’s very useful task and quite interesting. Creating it you can get better understanding how the compilers and interpreters work and probably write better code. Unfortunately there were two problems&amp;hellip;I didn’t have enough time for such task and&amp;hellip;I’ve not studied formal grammars (and as I mentioned I don’t have enough time to study them&amp;hellip;there are just so much more interesting things to read about :-P ).</description>
    </item>
    
  </channel>
</rss>
