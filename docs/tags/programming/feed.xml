<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/tags/Programming/</link>
    <description>Recent content in Programming on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/tags/Programming/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-User Video Conference with WebRTC</title>
      <link>https://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/</guid>
      <description>This is a tutorial for how to implement a multi-user video conference with WebRTC, AngularJS and Yeoman. It also includes a detailed explanation of how WebRTC works, how the peer to peer connections are being established and how the ICE (Interactive-Connectivity Establishment) framework is used for NAT traversal.
You can find deployed version of the project, we&amp;rsquo;re going to take a look at in this tutorial, at Heroku, the source code can be found at GitHub.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 3)</title>
      <link>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</guid>
      <description>Link to the first part of the series. Link to the second part of the series.
This is the last blog post of the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you want to be aware of my up-coming work, you can follow me at github.com/mgechev.
Directives Composite  The composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects are to be treated in the same way as a single instance of an object.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 2). Services.</title>
      <link>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</guid>
      <description>Link to the first part of the series.
This blog post continues the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you like my work you can follow me at github.com/mgechev.
Services In this sub-chapter we are going to take a look at the design and architectural patterns used in AngularJS&#39; services.
Note: Some of the described patterns are used in other components as well but their usage is almost equivalent so they are explained here.</description>
    </item>
    
    <item>
      <title>AngularJS in Patterns (Part 1). Overview of AngularJS</title>
      <link>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</guid>
      <description>In this series of blog posts I’m going to cover the paper I’m writing at GitHub.
It aims to provide a bit more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.
Part one includes only a high level overview of AngularJS, enjoy it.
AngularJS overview AngularJS is JavaScript framework developed by Google.</description>
    </item>
    
    <item>
      <title>What I get from the JavaScript MV* frameworks</title>
      <link>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</guid>
      <description>Why should I use JavaScript MVC, MVVM, MVP or simply MVW(hatever works for you)?
When I talk with people, who are beginners/intermediate in JavaScript I’m often asked this question. They are usually people who, until now, have used JavaScript only for making their website “fancier” – adding client-side form validation, creating carousel, checking whether a user already exists with simple Ajax request. When you start building something bigger (+10k lines of JavaScript) I truly believe that there are a few benefits from using such micro-architectural frameworks.</description>
    </item>
    
    <item>
      <title>AngularJS Inheritance Patterns</title>
      <link>https://blog.mgechev.com/2013/12/18/inheritance-services-controllers-in-angularjs/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/12/18/inheritance-services-controllers-in-angularjs/</guid>
      <description>Since AngularJS does not provide any built-in features for using inheritance, in this blog post I’ll describe how the general JavaScript inheritance patterns can be applied to AngularJS components.
Controllers inheritance First, lets talk about controllers. Actually it is very unlikely to inherit from parent controller (except when you&amp;rsquo;re using the controller as syntax, see below). This is the case because by implementation the scope in the child controller will inherit prototypically from its parent scope.</description>
    </item>
    
    <item>
      <title>AngularAOP v0.1.0</title>
      <link>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</guid>
      <description>In this blog post I’ll introduce you the new way of annotating services included in AngularAOP v0.1.0.
First, why we need a new way for annotation? In v0.0.1 the annotations were made in services’ bodies. It was something like this:
myApp.factory(&amp;#39;AwesomeService&amp;#39;, function (execute, d1, d2,...,dn) { var api = /* definition of our service api */ return execute(Logger).onThrowOf(execute(Authorization).before(api, { methodPattern: /Special|getArticleById/, argsPatterns: [/^user$/, /^[Ii]d(_num)?$/] })); }); This way of annotating services led to coupling between the services and the API of the AngularAOP’s aspect factory service called execute.</description>
    </item>
    
    <item>
      <title>Advanced JavaScript at Sofia University</title>
      <link>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</guid>
      <description>In this blog post I’ll tell few words about the course Advanced JavaScript which Georgi Penkov, Evgeni Kunev and me are leading this semester in Sofia University.
I was included as a lecturer in it after my project for Practical Programming with Perl (plainvm) which is created by Georgi Penkov. The idea behind the course is not to concentrate on the syntax of JavaScript but to introduce to the students different modern technologies.</description>
    </item>
    
    <item>
      <title>AngularJS style guide</title>
      <link>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</guid>
      <description>Today I created a GitHub repositorywhich contains a set of good practices and style guides for AngularJS application development.
Its main goal is to be community-driven and to concentrate all the best practices for AngularJS development in one place.
I’ve collected these guidelines mostly from my own experience and the source code of AngularJS. I guess there are missing things thats why I’ll try to fill the gaps in future. Also, if you find something which can be improved or included feel free to contribute.</description>
    </item>
    
    <item>
      <title>Aspect-Oriented Programming with AngularJS</title>
      <link>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</guid>
      <description>In the following blog post I’ll write few words about what is Aspect-Oriented Programming, why I think it will be useful in AngularJS and I’m also going to give you a short tutorial for using a simple AOP framework I’ve developed.
First things first. What is AOP? As we all know OOP is awesome! It gives us many tools for making our development process simpler. Its core principles are Abstraction, Encapsulation, Inheritance and Polymorphism.</description>
    </item>
    
    <item>
      <title>Practical programming with JavaScript</title>
      <link>https://blog.mgechev.com/2013/04/24/practical-programming-with-javascript/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/04/24/practical-programming-with-javascript/</guid>
      <description>Before few months I was invited by Telerik Academy to make a talk about JavaScript. Last Monday Marian Kostadinov, Radoslav Georgiev and me made a whole seminar about the topic. I’m addicted to the Object-Oriented programming so I choose to talk about that. You can find my slides at https://blog.mgechev.com/slides/javascript-patternsand a video (in Bulgarian) below in the post:
It was quite exciting for me to speak about this topic in front of about 200 people.</description>
    </item>
    
    <item>
      <title>Why I should use publish/subscribe in JavaScript</title>
      <link>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/04/24/why-to-use-publishsubscribe-in-javascript/</guid>
      <description>This post is inspired by my answer at StackOverflow.
So why we should use publish/subscribe? Why it is useful? Is it making our work harder or it makes our application better?
And the answer&amp;hellip;
It’s all about loose coupling and single responsibility, which goes hand to hand with MV* (MVC/MVP/MVVM) patterns in JavaScript which are very modern in the last few years.
Loose couplingis an Object-oriented principle in which each component of the system knows it’s responsibility and don’t care about the other components (or at least tries to not care about them as much as possible).</description>
    </item>
    
    <item>
      <title>JavaScript, the weird parts</title>
      <link>https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/</link>
      <pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/</guid>
      <description>To say that JavaScript is becoming more and more popular is such a typical and boring way to start such an awesome post&amp;hellip;Anyway, JavaScript is becoming more and more popular each day&amp;hellip;There’s client-side JavaScript with awesome API, you can do whatever you wish with it – write 3D games, stream video and audio, process files&amp;hellip;There’s also a server-side JavaScript which is also awesome (I guess awesome will be a common word for this post).</description>
    </item>
    
    <item>
      <title>Functional programming with JavaScript</title>
      <link>https://blog.mgechev.com/2013/01/21/functional-programming-with-javascript/</link>
      <pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/21/functional-programming-with-javascript/</guid>
      <description>This article is about the functional concepts of JavaScript. Some of them are built-in the languages, others extra implemented but all of them are very common for purely functional languages like Haskell. First I want to tell what I mean with the term purely functional language. These languages are “safe”, they will not make side effect i.e. evaluating an expression won’t change something in the internal state and lead to different result of the same expression when called next time.</description>
    </item>
    
    <item>
      <title>plainvm</title>
      <link>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvmcan take the virtualization into different level of usage. To prove this I’ll first ask few rhetorical questions and put their answers&amp;hellip;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;hellip;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) – the browser.</description>
    </item>
    
    <item>
      <title>Looking for performance? Probably you should NOT use [].sort (V8)</title>
      <link>https://blog.mgechev.com/2012/11/24/javascript-sorting-performance-quicksort-v8/</link>
      <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/11/24/javascript-sorting-performance-quicksort-v8/</guid>
      <description>A few days ago, I’ve created a GitHub repository. It’s main goal was to collect different algorithms with implementations in JavaScript. I started with basic ones – sorting (insertion, selection, bubble sort..). After that I implemented few “more advance” like marge, quick and heap sort. It was interesting to me how much slower my implementation will be compared to the default sort. It was so interesting because of:
function sort() { [native code] } That’s why I’ve wrote not optimized version of mergesort and I’ve run it with generated array with 500k elements.</description>
    </item>
    
    <item>
      <title>JavaScript image scaling</title>
      <link>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</link>
      <pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/11/02/javascript-html5-scale-image/</guid>
      <description>I haven’t wrote here for a while so I decided to write about something more practical. Actually the idea for the post come from one my response in stackoverflow. The post is connected with pure client side image scaling. While you’re reading the example I hope that you’ll see how powerful is the HTML5 API and how with few lines of code you can do something which in other technologies is much more complex.</description>
    </item>
    
    <item>
      <title>ELang</title>
      <link>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/09/15/creating-your-own-programming-language/</guid>
      <description>And one more blog post by me! It’s going to be in brand new topic than the others. For about an year and a half I’ve got an idea which I wanted to accomplish&amp;hellip;To create my own simple programming language. Actually it’s very useful task and quite interesting. Creating it you can get better understanding how the compilers and interpreters work and probably write better code. Unfortunately there were two problems&amp;hellip;I didn’t have enough time for such task and&amp;hellip;I’ve not studied formal grammars (and as I mentioned I don’t have enough time to study them&amp;hellip;there are just so much more interesting things to read about :-P ).</description>
    </item>
    
    <item>
      <title>HTML5 image editor</title>
      <link>https://blog.mgechev.com/2012/04/25/html5-image-editor/</link>
      <pubDate>Wed, 25 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/04/25/html5-image-editor/</guid>
      <description>As you see HTML5 is everywhere (of course I exclude IE&amp;hellip;or just before version 10). Web site used for quick image composition or edition is something very useful for the “modern web person”. There are few such services. Most of them use Flash. Nothing against it but&amp;hellip;it’s too heavy for me&amp;hellip;unnecessarily heavy. For all that stuff you can use HTML5 canvas. I also found some HTML5 image editors but their functionality was very limited.</description>
    </item>
    
    <item>
      <title>Курсови проекти – ФМИ</title>
      <link>https://blog.mgechev.com/2012/03/31/%d0%ba%d1%83%d1%80%d1%81%d0%be%d0%b2%d0%b8-%d0%bf%d1%80%d0%be%d0%b5%d0%ba%d1%82%d0%b8-%d1%84%d0%bc%d0%b8/</link>
      <pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/03/31/%d0%ba%d1%83%d1%80%d1%81%d0%be%d0%b2%d0%b8-%d0%bf%d1%80%d0%be%d0%b5%d0%ba%d1%82%d0%b8-%d1%84%d0%bc%d0%b8/</guid>
      <description>Тъй като съм вече студент 3-ти курс във ФМИ и курсовите проекти се натрупаха, мисля че мога да бъда полезен на “младото поколение ФМИ-исти”, като предоставя една страница с връзки към кода, който съм разработил. Това ще можете да намерите в новата секция на блога ми “FMI Projects”.
Надявам се с това да помогна на студентите или да накарам преподавателите да проявят повече въображение в бъдещите задания към студентите :-).</description>
    </item>
    
    <item>
      <title>Carousel Gallery</title>
      <link>https://blog.mgechev.com/2012/02/16/carousel-gallery/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2012/02/16/carousel-gallery/</guid>
      <description>And one post in English&amp;hellip;For few days I’m developing one jQuery UI plugin. It’s picture gallery which I’ve seen in flash but not in JavaScript, that’s why I decided to fix this. The gallery is a set of rotating pictures and difference ways of handling the perspective. There’s nothing complicated in it just little analytic geometry. I haven’t used any canvases or SVG because I’ve wanted the biggest possible browser compatibility.</description>
    </item>
    
    <item>
      <title>Sound notification in web page</title>
      <link>https://blog.mgechev.com/2011/11/01/cross-browser-sound-notifications/</link>
      <pubDate>Tue, 01 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/11/01/cross-browser-sound-notifications/</guid>
      <description>Few days ago I was creating a system in which it was necessary to implement a sound notification feature. Well it’s not very hard task but of course you have to be careful with the browser compatibility. At first my source was something like that:
playSound: function () { this.config.soundNotify.html(&amp;#39;&amp;lt;embed src=&amp;#34;&amp;#39; + this.config.soundFile + &amp;#39;.wav&amp;#34; hidden=true autostart=true loop=false&amp;gt;&amp;#39;); } Actually in my Linux it was working pretty well (I tried it mainly in Chrome).</description>
    </item>
    
    <item>
      <title>f8</title>
      <link>https://blog.mgechev.com/2011/09/22/f8/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/09/22/f8/</guid>
      <description>Ето нещо интересно, което ще можем да следим онлайн утре сутрин:</description>
    </item>
    
    <item>
      <title>Ajax without jQuery for beginners</title>
      <link>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</link>
      <pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/21/ajax-jquery-beginners/</guid>
      <description>Before years I was writing all the code by my own, without additional libraries (including jQuery). For beginner developer it’s a good strategy. When you use $.ajax it’s all that easy:
$.ajax({ url: &amp;#34;any/url/for/the/request&amp;#34;, type: &amp;#34;get&amp;#34;, success: function(data){ alert(data); } }); But you can’t get the main idea.
Many developers don’t have an idea how to write this without a library. In their opinion AJAX without library a hard, near impossible task.</description>
    </item>
    
    <item>
      <title>Blogger image resize</title>
      <link>https://blog.mgechev.com/2011/07/17/blogger-image-resize/</link>
      <pubDate>Sun, 17 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2011/07/17/blogger-image-resize/</guid>
      <description>That’s my second post here and the first one which is going to have any sense. Today a friend of mine was fighting with Google’s blog system&amp;hellip;He was posting some data with images in it. When he was setting width and height of images in the html editor they were being resized later after he post the article. When he tried to put any CSS restriction about picture’s width the effect was – picture flattened (because blogger was setting the picture height).</description>
    </item>
    
  </channel>
</rss>
