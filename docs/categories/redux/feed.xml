<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redux on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Redux/</link>
    <description>Recent content in Redux on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/Redux/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3 Tricks For Using Redux and Immutable.js with TypeScript</title>
      <link>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</guid>
      <description>In this post, I&amp;rsquo;ll show you a few tricks which can make your life using Immutable.js and Redux with TypeScript easier. All the practices are inspired by my recent work on the project Rhyme.com.&#xA;Immutable Statically Typed Records Let&amp;rsquo;s start with the definition of our store. For the purpose I prefer to use Immutable records because of two main reasons:&#xA;Immutable stores make the mutation more explicit and well organized. Records allow convenient property access.</description>
    </item>
    <item>
      <title>Redux Anti-Patterns - Part 1. State Management.</title>
      <link>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2017/12/07/redux-anti-patterns-race-conditions-state-management-duplication/</guid>
      <description>For the past year I&amp;rsquo;ve been working on a project which uses React with TypeScript and Redux. In a few blog posts I&amp;rsquo;m planning to share lessons learned while combining these technologies. In this article I&amp;rsquo;ll share a few anti-patterns related to state management that I noticed in our development process. In the second article I&amp;rsquo;ll focus on testability.&#xA;All of the anti-patterns below have the following structure:&#xA;Introduction Problem definition Sample solutions with discussion of their pros and cons State Duplication Sometimes we have instances of the same business entity used in different contexts.</description>
    </item>
  </channel>
</rss>
