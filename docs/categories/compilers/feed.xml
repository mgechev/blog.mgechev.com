<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compilers on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Compilers/</link>
    <description>Recent content in Compilers on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/categories/Compilers/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fast, extensible, configurable, and beautiful linter for Go</title>
      <link>https://blog.mgechev.com/2018/05/28/revive-golang-golint-linter/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/05/28/revive-golang-golint-linter/</guid>
      <description>About a year ago I decided to polish my Go skills. Although the language is pretty small compared to most others that I use on a daily basis, it still has some useful syntax constructs that I didn&amp;rsquo;t use enough. What a better way to brush up your skills in a programming language other than building tools with it&amp;hellip;for analyzing programs written in it?
You can find revive on GitHub at github.</description>
    </item>
    
    <item>
      <title>Implementing a Simple Compiler on 25 Lines of JavaScript</title>
      <link>https://blog.mgechev.com/2017/09/16/developing-simple-interpreter-transpiler-compiler-tutorial/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/09/16/developing-simple-interpreter-transpiler-compiler-tutorial/</guid>
      <description>I already wrote a couple of essays related to the development of programming languages that I was extremely excited about! For instance, in &amp;ldquo;Static Code Analysis of Angular 2 and TypeScript Projects&amp;quot;[1] I explored the basics of the front end of the compilers, explaining the phases of lexical analysis, syntax analysis and abstract-syntax trees.
Recently I published &amp;ldquo;Developing Statically Typed Programming Language&amp;quot;[2]. This post shown a simple, statically typed, functional programming language inspired by lambda calculus.</description>
    </item>
    
    <item>
      <title>Developing Statically Typed Programming Language</title>
      <link>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/08/05/typed-lambda-calculus-create-type-checker-transpiler-compiler-javascript/</guid>
      <description>In this blog post we&amp;rsquo;ll go through a sample implementation of a type checker, interpreter and a transpiler for a basic purely functional programming language, which is based on the lambda calculus. We will do a &amp;ldquo;full-stack&amp;rdquo; programming language development by going through formal definition of the language&amp;rsquo;s syntax, semantics and type system. After that we&amp;rsquo;ll demonstrate how we can &amp;ldquo;translate&amp;rdquo; these definitions to JavaScript.
Although the article doesn&amp;rsquo;t require any mathematical background, it&amp;rsquo;ll be useful to have high-level understanding of how compilers work.</description>
    </item>
    
    <item>
      <title>Ahead-of-Time Compilation in Angular</title>
      <link>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</guid>
      <description>Recently I added Ahead-of-Time (AoT) compilation support to angular-seed and got a lot of questions about the new feature. In order to answer most of them, we will start from the beginning by explaining the following topics:
Why we need compilation in Angular? What needs to be compiled? How it gets compiled? When the compilation takes place? Just-in-Time (JiT) vs Ahead-of-Time (AoT). What we get from AoT? How the AoT compilation works?</description>
    </item>
    
  </channel>
</rss>
