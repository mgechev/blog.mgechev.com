<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Immutability on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Immutability/</link>
    <description>Recent content in Immutability on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/Immutability/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Even Faster AngularJS Data Structures</title>
      <link>https://blog.mgechev.com/2015/04/20/fast-angular-data-structures-versionable/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2015/04/20/fast-angular-data-structures-versionable/</guid>
      <description>This is the last post of the series &amp;ldquo;Boost the Performance of an AngularJS Application Using Immutable Data&amp;rdquo;. I strongly recommend you to take a look at the previous two parts before continue reading this content. You can find them at:&#xA;Part 1 Part 2 Introduction Before about a month ago, I decided to experiment using immutable data structures in an AngularJS application. The goal behind my decision was quite simple - optimization of the $digest loop.</description>
    </item>
    <item>
      <title>Boost the Performance of an AngularJS Application Using Immutable Data - Part 2</title>
      <link>https://blog.mgechev.com/2015/04/11/immutability-in-angularjs-immutablejs-part-2/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2015/04/11/immutability-in-angularjs-immutablejs-part-2/</guid>
      <description>A few weeks ago I posted the article &amp;ldquo;Boost the Performance of an AngularJS Application Using Immutable Data&amp;rdquo;. It shows how to speedup your AngularJS application when having a lot of bindings to big data collections. The idea behind the optimization is quite simple - create a new collection when the data changes. This way you can reduce the watchers execution from O(n) to O(1).&#xA;In the post I did simple profiling using the built-in Date but it didn&amp;rsquo;t give enough information in exactly which cases it is more suitable to use immutable data and when you should bet on the standard collections.</description>
    </item>
    <item>
      <title>Boost the Performance of an AngularJS Application Using Immutable Data</title>
      <link>https://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/</guid>
      <description>I have affinity to functional programming since my first year in college. During my initial contact with a purely functional programming language (Haskell in my case) I didn&amp;rsquo;t really understand all the advantages it provides, everything was reduced to just writing a cool recursive functions and solving algorithmic problems.&#xA;Later, when my code was used in production, I started appreciating things like high-order functions, closures, currying, etc. I even wrote a blog post on topic &amp;ldquo;Functional programming with JavaScript&amp;rdquo;.</description>
    </item>
  </channel>
</rss>
