<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web development on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Web-development/</link>
    <description>Recent content in Web development on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/Web-development/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reactive framework in ~200 lines of code</title>
      <link>https://blog.mgechev.com/2025/01/09/minimal-reactive-framework/</link>
      <pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2025/01/09/minimal-reactive-framework/</guid>
      <description>One of my current projects is converging Angular and Wiz into the same framework. This is a complex projects that involves a lot of work and many people. It also got me thinking about different client-side rendering models. In this blog post I&amp;rsquo;ll show a very simple library that enables you to develop components with fine-grained reactivity. To make it easier to talk about this library, I called it &amp;ldquo;revolt.&amp;rdquo;</description>
    </item>
    <item>
      <title>Managing Angular</title>
      <link>https://blog.mgechev.com/2024/08/25/managing-angular/</link>
      <pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2024/08/25/managing-angular/</guid>
      <description>Over the past couple of years, I&amp;rsquo;ve been the product lead for Angular. In this article, I&amp;rsquo;d like to share how we&amp;rsquo;ve been managing the framework. Keep in mind this content lives on my personal blog for a reason - it represents my point of view and doesn&amp;rsquo;t share a complete picture of all the processes within the team, such as people management, program management, etc. Also, that&amp;rsquo;s the second time I&amp;rsquo;m writing this article.</description>
    </item>
    <item>
      <title>AngularJS in Patterns (Part 3)</title>
      <link>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/07/05/angularjs-in-patterns-part-3/</guid>
      <description>This publication aims to provide a more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture. Link to the first part of the series. Link to the second part of the series.&#xA;This is the last blog post of the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.</description>
    </item>
    <item>
      <title>AngularJS in Patterns (Part 2). Services.</title>
      <link>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/06/08/angularjs-in-patterns-part-2-services/</guid>
      <description>This publication aims to provide a more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture. Link to the first part of the series.&#xA;This blog post continues the series &amp;ldquo;AngularJS in Patterns&amp;rdquo;. You can find the original GitHub repository, which contains all the information at github.com/mgechev/angularjs-in-patterns. If you like my work you can follow me at github.</description>
    </item>
    <item>
      <title>AngularJS in Patterns (Part 1). Overview of AngularJS</title>
      <link>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/05/08/angularjs-in-patterns-part-1-overview-of-angularjs/</guid>
      <description>In this series of blog posts I’m going to cover the paper I’m writing at GitHub.&#xA;It aims to provide a bit more theoretical overview of some of the AngularJS components in order to show you how the things you are already familiar with (like different Object-Oriented Design Patterns) fit in the picture.&#xA;Part one includes only a high level overview of AngularJS, enjoy it.&#xA;AngularJS overview AngularJS is JavaScript framework developed by Google.</description>
    </item>
    <item>
      <title>Express over HTTPS</title>
      <link>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</guid>
      <description>Sometimes you want to test your application in environment closer to the real world. In such cases you might need to run it over TLS.&#xA;Here are two simple steps, which can be used to achieve this result:&#xA;Generate self-signed certificate If you don’t already have certificate you need to generate one:&#xA;$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 You will be asked a couple of questions&amp;hellip; In this case we generated a self-signed certificate for 365 days.</description>
    </item>
    <item>
      <title>What I get from the JavaScript MV* frameworks</title>
      <link>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</guid>
      <description>Why should I use JavaScript MVC, MVVM, MVP or simply MVW(hatever works for you)?&#xA;When I talk with people, who are beginners/intermediate in JavaScript I’m often asked this question. They are usually people who, until now, have used JavaScript only for making their website “fancier” – adding client-side form validation, creating carousel, checking whether a user already exists with simple Ajax request. When you start building something bigger (+10k lines of JavaScript) I truly believe that there are a few benefits from using such micro-architectural frameworks.</description>
    </item>
    <item>
      <title>The magic of $resource (or simply a client-side Active Record)</title>
      <link>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</guid>
      <description>At first sight AngularJS seems like a magical framework, which does some weird but awesome things like dependency injection, data binding only by setting a single property to the magical object named $scope and many other things.&#xA;If you look at the source code of Angular you’ll see a lot of smart and simple solutions for these magical problems. In this blog post I’ll describe the magic which stays behind $resource.</description>
    </item>
    <item>
      <title>AngularJS style guide</title>
      <link>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/10/06/angularjs-style-guide/</guid>
      <description>Today I created a GitHub repository which contains a set of good practices and style guides for AngularJS application development.&#xA;Its main goal is to be community-driven and to concentrate all the best practices for AngularJS development in one place.&#xA;I’ve collected these guidelines mostly from my own experience and the source code of AngularJS. I guess there are missing things thats why I’ll try to fill the gaps in future.</description>
    </item>
    <item>
      <title>Lazy prefetching of AngularJS partials</title>
      <link>https://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/</guid>
      <description>This blog post is concentrated about web performance. I’ll skip the well known stuff about combining images into sprites, inlining images, DNS pre-fetching, combining and minifying script files, gzipping and so on. There are plenty of articles and tools which will help you about these things. There are also excellent researches on these topics, few of the best I’ve read are these by Mobify, Web Performance Daybook Volume, High Performance Web Sites and Critical rendering path – Crash course on web performance and many others.</description>
    </item>
  </channel>
</rss>
