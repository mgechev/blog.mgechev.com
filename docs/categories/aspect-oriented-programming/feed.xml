<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aspect-Oriented Programming on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Aspect-Oriented-Programming/</link>
    <description>Recent content in Aspect-Oriented Programming on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/Aspect-Oriented-Programming/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AngularAOP v0.1.0</title>
      <link>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</guid>
      <description>In this blog post I’ll introduce you the new way of annotating services included in AngularAOP v0.1.0.&#xA;First, why we need a new way for annotation? In v0.0.1 the annotations were made in services’ bodies. It was something like this:&#xA;myApp.factory(&amp;#39;AwesomeService&amp;#39;, function (execute, d1, d2,...,dn) { var api = /* definition of our service api */ return execute(Logger).onThrowOf(execute(Authorization).before(api, { methodPattern: /Special|getArticleById/, argsPatterns: [/^user$/, /^[Ii]d(_num)?$/] })); }); This way of annotating services led to coupling between the services and the API of the AngularAOP’s aspect factory service called execute.</description>
    </item>
    <item>
      <title>Aspect-Oriented Programming with AngularJS</title>
      <link>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</link>
      <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/08/07/aspect-oriented-programming-with-javascript-angularjs/</guid>
      <description>In the following blog post I’ll write few words about what is Aspect-Oriented Programming, why I think it will be useful in AngularJS and I’m also going to give you a short tutorial for using a simple AOP framework I’ve developed.&#xA;First things first. What is AOP? As we all know OOP is awesome! It gives us many tools for making our development process simpler. Its core principles are Abstraction, Encapsulation, Inheritance and Polymorphism.</description>
    </item>
  </channel>
</rss>
