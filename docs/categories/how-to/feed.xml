<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How-to on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/How-to/</link>
    <description>Recent content in How-to on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/How-to/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Your own Simplified AngularJS in 200 Lines of JavaScript</title>
      <link>https://blog.mgechev.com/2015/03/09/build-learn-your-own-light-lightweight-angularjs/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2015/03/09/build-learn-your-own-light-lightweight-angularjs/</guid>
      <description>My practice proved that there are two good/easy ways to learn a new technology:&#xA;Re-implement it by your own See how the concepts you already know fit in it In some cases the first approach is too big overhead. For instance, if you want to understand how the kernel works it is far too complex and slow to re-implement it. It might work to implement a light version of it (a model), which abstracts components that are not interesting for your learning purposes.</description>
    </item>
  </channel>
</rss>
