<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Node.js/</link>
    <description>Recent content in Node.js on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mgechev.com/categories/Node.js/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Express over HTTPS</title>
      <link>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/</guid>
      <description>Sometimes you want to test your application in environment closer to the real world. In such cases you might need to run it over TLS.&#xA;Here are two simple steps, which can be used to achieve this result:&#xA;Generate self-signed certificate If you don’t already have certificate you need to generate one:&#xA;$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 You will be asked a couple of questions&amp;hellip; In this case we generated a self-signed certificate for 365 days.</description>
    </item>
    <item>
      <title>The magic of $resource (or simply a client-side Active Record)</title>
      <link>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2014/02/05/angularjs-resource-active-record-http/</guid>
      <description>At first sight AngularJS seems like a magical framework, which does some weird but awesome things like dependency injection, data binding only by setting a single property to the magical object named $scope and many other things.&#xA;If you look at the source code of Angular you’ll see a lot of smart and simple solutions for these magical problems. In this blog post I’ll describe the magic which stays behind $resource.</description>
    </item>
    <item>
      <title>Advanced JavaScript at Sofia University</title>
      <link>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</guid>
      <description>In this blog post I’ll tell few words about the course Advanced JavaScript which Georgi Penkov, Evgeni Kunev and me are leading this semester in Sofia University.&#xA;I was included as a lecturer in it after my project for Practical Programming with Perl (plainvm) which is created by Georgi Penkov. The idea behind the course is not to concentrate on the syntax of JavaScript but to introduce to the students different modern technologies.</description>
    </item>
    <item>
      <title>VNC client on 200 lines of JavaScript</title>
      <link>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</guid>
      <description>In this quick blog post I’ll show you how to create a simple VNC client in about 200 lines of JavaScript. For our goal we’re going to use only HTML5 and JavaScript (client and server side). The end result will be something like this:&#xA;So, let’s begin!&#xA;Our application will have very simple architecture – a proxy server written in Node.js and a client in HTML5 and JavaScript. The Node.js server will stay between the browser and the VNC server.</description>
    </item>
  </channel>
</rss>
