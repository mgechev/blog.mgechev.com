<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Immutable.js on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/Immutable.js/</link>
    <description>Recent content in Immutable.js on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/categories/Immutable.js/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3 Tricks For Using Redux and Immutable.js with TypeScript</title>
      <link>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</guid>
      <description>In this post, I&amp;rsquo;ll show you a few tricks which can make your life using Immutable.js and Redux with TypeScript easier. All the practices are inspired by my recent work on the project Rhyme.com.
Immutable Statically Typed Records Let&amp;rsquo;s start with the definition of our store. For the purpose I prefer to use Immutable records because of two main reasons:
 Immutable stores make the mutation more explicit and well organized.</description>
    </item>
    
  </channel>
</rss>
