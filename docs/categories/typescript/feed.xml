<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Minko Gechev&#39;s blog</title>
    <link>https://blog.mgechev.com/categories/TypeScript/</link>
    <description>Recent content in TypeScript on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.mgechev.com/categories/TypeScript/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Bazel Schematics for Angular CLI</title>
      <link>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/12/17/introduction-bazel-schematics-angular-cli/</guid>
      <description>In this blog post, we want to share our new schematics for Angular CLI which provide Bazel build support. You can find the implementation by Keen Liau on GitHub. With the @angular/bazel package, we want to let developers use Angular CLI with Bazel as a build tool.
What&amp;rsquo;s Bazel? Google open sourced the software responsible for building most of our projects under the name Bazel. Bazel is a powerful tool which can keep track of the dependencies between different packages and build targets.</description>
    </item>
    
    <item>
      <title>Building TypeScript Projects with Bazel</title>
      <link>https://blog.mgechev.com/2018/11/19/introduction-bazel-typescript-tutorial/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/11/19/introduction-bazel-typescript-tutorial/</guid>
      <description>In this blog post, we&amp;rsquo;ll make a brief introduction to what Bazel is and how we can build our TypeScript projects with it. If you&amp;rsquo;re already familiar with the problems that Bazel solves, feel free to skip to the section &amp;ldquo;Building TypeScript with Bazel.&amp;rdquo; You can find the example from this blog post in my GitHub account.
Inside Google&amp;rsquo;s CI Google manages a massive amount of source code. There are dependencies between the individual projects, for example, the user interface of Google Cloud depends on Angular &amp;amp; Angular Material, Angular Material depends on Angular, which depends on TypeScript.</description>
    </item>
    
    <item>
      <title>Machine Learning-Driven Bundling. The Future of JavaScript Tooling.</title>
      <link>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/03/18/machine-learning-data-driven-bundling-webpack-javascript-markov-chain-angular-react/</guid>
      <description>In this article, I&amp;rsquo;ll introduce the early implementation of a few tools which based on techniques from the machine learning allow us to perform data-driven chunk clustering and pre-fetching for single-page applications. The purpose is to provide a zero-configuration mechanism which based on data from Google Analytics for the users&amp;rsquo; behavior performs the most optimal build. We&amp;rsquo;re also going to introduce a webpack plugin which works with Angular CLI and Create React App.</description>
    </item>
    
    <item>
      <title>JavaScript Decorators for Declarative and Readable Code</title>
      <link>https://blog.mgechev.com/2018/01/29/javascript-decorators-aop-autobind-memoization/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/01/29/javascript-decorators-aop-autobind-memoization/</guid>
      <description>Decorators in JavaScript are now in stage 2. They allow us to alter the definition of a class, method, or a property. There are already a few neat libraries which provide decorators and make our life easier by allowing us to write more declarative code with better performance characteristics.
In this blog post I&amp;rsquo;ll share a few decorators which I&amp;rsquo;m using on a daily basis. We&amp;rsquo;ll take a look at:</description>
    </item>
    
    <item>
      <title>3 Tricks For Using Redux and Immutable.js with TypeScript</title>
      <link>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2018/01/18/react-typescript-redux-immutable/</guid>
      <description>In this post, I&amp;rsquo;ll show you a few tricks which can make your life using Immutable.js and Redux with TypeScript easier. All the practices are inspired by my recent work on the project Rhyme.com.
Immutable Statically Typed Records Let&amp;rsquo;s start with the definition of our store. For the purpose I prefer to use Immutable records because of two main reasons:
Immutable stores make the mutation more explicit and well organized. Records allow convenient property access.</description>
    </item>
    
    <item>
      <title>7 Angular Tools That You Should Consider</title>
      <link>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</guid>
      <description>In this article we&amp;rsquo;re going to quickly explore 7 Angular development tools which can make our everyday life easier. The purpose of the list is to not be opinionated architecture wise. This means that we&amp;rsquo;re not going to discuss tooling which has impact over our choice of application state management, data layer, etc. For instance, although packages like ngrx/store devtools, universal, and others are amazing once we&amp;rsquo;ve chosen a specific architectural approach, we&amp;rsquo;re going to keep them out of this article because they assume we&amp;rsquo;re using a specific way of state management or application rendering.</description>
    </item>
    
    <item>
      <title>Announcing ngrev - Reverse Engineering Tool for Angular</title>
      <link>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</guid>
      <description>Have you ever been hired to work on a huge legacy Angular project with thousands of NgModules, components, directives, pipes and services? Neither do I. Angular (2 and above) is still relatively new framework and there are not many enormous projects out there. On the other hand, Angular is powerful and in combination with TypeScript we can build big, enterprise applications.
Exploring an Application It&amp;rsquo;s hard to start digging into a large codebase without being aware of the overall structure of the project.</description>
    </item>
    
    <item>
      <title>Implementing Angular&#39;s Dependency Injection in React. Understanding Element Injectors.</title>
      <link>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</guid>
      <description>Recently I&amp;rsquo;ve been blogging mostly about Angular and it&amp;rsquo;s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I&amp;rsquo;m working on have various of different requirements and sometimes I need to consider different options.
Another great technology that I&amp;rsquo;ve used in the past is React. I don&amp;rsquo;t want to compare it with Angular; I&amp;rsquo;m sure there are variety of cases when one of them fits better compared to the other and visa versa.</description>
    </item>
    
    <item>
      <title>Distributing an Angular Library - The Brief Guide</title>
      <link>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</guid>
      <description>In this post I&amp;rsquo;ll quickly explain the minimum you need to know in order to publish an Angular component to npm. By the end of the post you&amp;rsquo;ll know how your module can:
Be platform independent (i.e. run in Web Workers, Universal). Should be bundled and distributed. Work with the Angular&amp;rsquo;s Ahead-of-Time compiler. Play well with TypeScript by allowing autocompletion and compile-time type checking. If you&amp;rsquo;re only interested in a quick checklist of things you need to consider for distributing your Angular library, go directly to the &amp;ldquo;Distributing an Angular Library - Checklist&amp;rdquo; section.</description>
    </item>
    
    <item>
      <title>Angular in Production</title>
      <link>https://blog.mgechev.com/2017/01/17/angular-in-production/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2017/01/17/angular-in-production/</guid>
      <description>In this informal essay I&amp;rsquo;ll go through a case study of my experience in using Angular (2 and above) in production.
Last April, together with a small team, we started working on an educational application; the second version of a product that I developed about 3 years ago using Angular 1.
The product targets young kids and their parents. It&amp;rsquo;s purpose is to motivate kids to learn maths by earning rewards.</description>
    </item>
    
    <item>
      <title>Ahead-of-Time Compilation in Angular</title>
      <link>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</guid>
      <description>Recently I added Ahead-of-Time (AoT) compilation support to angular-seed and got a lot of questions about the new feature. In order to answer most of them, we will start from the beginning by explaining the following topics:
Why we need compilation in Angular? What needs to be compiled? How it gets compiled? When the compilation takes place? Just-in-Time (JiT) vs Ahead-of-Time (AoT). What we get from AoT? How the AoT compilation works?</description>
    </item>
    
    <item>
      <title>Scalable Single-Page Application Architecture</title>
      <link>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/</guid>
      <description>In order to have better understanding of the following blog post you should be familiar with the fundamentals of the object-oriented and functional programming. I also strongly encourage you to explore the redux pattern.
A couple of months ago I started working on the first version of a Silicon Valley-based startup. The project is a single-page application with quite dynamic business requirements. As in most modern single-page applications we have a fat client which encapsulates decent amount of business logic and state.</description>
    </item>
    
    <item>
      <title>Managing ambient type definitions and dealing with the &#34;Duplicate identifier&#34; TypeScript error</title>
      <link>https://blog.mgechev.com/2016/03/28/ambient-type-definitions-duplicate-identifier-typescript-fix/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/03/28/ambient-type-definitions-duplicate-identifier-typescript-fix/</guid>
      <description>Maintaining the angular-seed, I found out that the most common problem for developers using the project is:
Duplicate identifier &amp;#39;export=&amp;#39;. (2300) compilation error.
In this quick tutorial I&amp;rsquo;ll show what does this error mean and how you can fix it. In order to get better understanding of the problem we&amp;rsquo;ll discuss the differences between TypeScript and JavaScript, as well as ambient type definitions and @types.
Intro Before getting any further we need to tell a few words about the ambient type definitions of TypeScript.</description>
    </item>
    
    <item>
      <title>Static Code Analysis of Angular 2 and TypeScript Projects</title>
      <link>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2016/02/29/static-code-analysis-angular-typescript/</guid>
      <description>So far, most of the blog posts I&amp;rsquo;ve written are tutorials; they explain how we can use given technologies, architectures, algorithm etc. For instance:
Flux in Depth. Store and Network Communication. ViewChildren and ContentChildren in Angular 2 Build Your own Simplified AngularJS in 200 Lines of JavaScript Remote Desktop Client with AngularJS and Yeoman The code for the current research could be found here and here.
The current post is about an exciting project I am working on in my spare time.</description>
    </item>
    
    <item>
      <title>Using JSX with TypeScript</title>
      <link>https://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</guid>
      <description>JavaScript is a weird language although, we love it the way it is. However, I&amp;rsquo;ve had quite a painful experience working on big JavaScript projects. It was painful in the same way it gets painful working on huge Ruby, Python, PHP projects.
Once you have code base above 10-15k lines of code and you decide to do some refactoring&amp;hellip;well it gets messy. Although grep and sed are powerful tools for text manipulation, when you start replacing code with them, you&amp;rsquo;re missing the semantics (or the context) of the snippets you substitute.</description>
    </item>
    
  </channel>
</rss>
